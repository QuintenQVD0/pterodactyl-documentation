{"searchDocs":[{"title":"Community Guides and Tutorials","type":0,"sectionRef":"#","url":"/pterodactyl-documentation/docs/community/about/","content":"","keywords":"","version":"Next"},{"title":"About","type":1,"pageTitle":"Community Guides and Tutorials","url":"/pterodactyl-documentation/docs/community/about/##","content":" This section of Pterodactyl's site is dedicated to more complex topics, tutorials, and features that we feel are important to share with the community, but do not fit into the theme of our core documentation.  Here you'll find in-depth OS-specific installation guides, advanced network configurations, individual game setup instructions, and so much more. ","version":"Next","tagName":"h2"},{"title":"Community Guides","type":0,"sectionRef":"#","url":"/pterodactyl-documentation/docs/community/","content":"Community Guides üìÑÔ∏è Community Guides and Tutorials About","keywords":"","version":"Next"},{"title":"Panel Installation","type":0,"sectionRef":"#","url":"/pterodactyl-documentation/docs/community/panel/","content":"Panel Installation üìÑÔ∏è CentOS 7 In this guide we will install Pterodactyl v1.X ‚Äî including all of it's dependencies ‚Äî and configure our webserver üìÑÔ∏è CentOS 8, Rocky Linux 8, AlmaLinux 8 In this guide we will install Pterodactyl v1.X ‚Äî including all of it's dependencies ‚Äî and configure our webserver to serve it using SSL. üìÑÔ∏è Debian 11 &amp; 12 This guide is based off the official installation documentation but is tailored specifically for Debian 11 and 12.","keywords":"","version":"Next"},{"title":"Debian 11 & 12","type":0,"sectionRef":"#","url":"/pterodactyl-documentation/docs/community/panel/install/debian/","content":"","keywords":"","version":"Next"},{"title":"Dependency Installation","type":1,"pageTitle":"Debian 11 & 12","url":"/pterodactyl-documentation/docs/community/panel/install/debian/##","content":" In this guide, we will install the required dependencies for the Pterodactyl panel. After that, you can follow the official installation documentation.  # Update package lists apt update -y # Install necessary packages apt -y install software-properties-common curl ca-certificates gnupg2 sudo lsb-release # Add repository for PHP echo &quot;deb https://packages.sury.org/php/ $(lsb_release -sc) main&quot; | sudo tee /etc/apt/sources.list.d/sury-php.list curl -fsSL https://packages.sury.org/php/apt.gpg | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/sury-keyring.gpg # Add repository for Redis curl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg echo &quot;deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main&quot; | sudo tee /etc/apt/sources.list.d/redis.list # Update package lists apt update -y # Install PHP and required extensions apt install -y php8.1 php8.1-{common,cli,gd,mysql,mbstring,bcmath,xml,fpm,curl,zip} # MariaDB repo setup script curl -sS https://downloads.mariadb.com/MariaDB/mariadb_repo_setup | sudo bash # Install the rest of dependencies apt install -y mariadb-server nginx tar unzip git redis-server   ","version":"Next","tagName":"h2"},{"title":"Installing Composer","type":1,"pageTitle":"Debian 11 & 12","url":"/pterodactyl-documentation/docs/community/panel/install/debian/##","content":" Composer is a dependency manager for PHP that allows us to ship everything you'll need code wise to operate the Panel. You'll need composer installed before continuing in this process.  curl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin --filename=composer   ","version":"Next","tagName":"h3"},{"title":"Download Files","type":1,"pageTitle":"Debian 11 & 12","url":"/pterodactyl-documentation/docs/community/panel/install/debian/##","content":" Great, now all of the dependencies have been dealt with. Continue the installation by following the official documentation Download Files section. ","version":"Next","tagName":"h3"},{"title":"CentOS 8, Rocky Linux 8, AlmaLinux 8","type":0,"sectionRef":"#","url":"/pterodactyl-documentation/docs/community/panel/install/centos8/","content":"","keywords":"","version":"Next"},{"title":"Install Requirements and Additional Utilities","type":1,"pageTitle":"CentOS 8, Rocky Linux 8, AlmaLinux 8","url":"/pterodactyl-documentation/docs/community/panel/install/centos8/##","content":" We will install all of Pterodactyl's required dependencies and a few aditional utilities.  If you run sestatus and it shows SELinux status: enabled you should install the following packages for later  ","version":"Next","tagName":"h2"},{"title":"SELinux tools","type":1,"pageTitle":"CentOS 8, Rocky Linux 8, AlmaLinux 8","url":"/pterodactyl-documentation/docs/community/panel/install/centos8/##","content":" dnf install -y policycoreutils selinux-policy selinux-policy-targeted setroubleshoot-server setools setools-console mcstrans   ","version":"Next","tagName":"h3"},{"title":"MariaDB","type":1,"pageTitle":"CentOS 8, Rocky Linux 8, AlmaLinux 8","url":"/pterodactyl-documentation/docs/community/panel/install/centos8/##","content":" dnf install -y mariadb mariadb-server ## Start maraidb systemctl start mariadb systemctl enable mariadb   ","version":"Next","tagName":"h3"},{"title":"PHP 8.1","type":1,"pageTitle":"CentOS 8, Rocky Linux 8, AlmaLinux 8","url":"/pterodactyl-documentation/docs/community/panel/install/centos8/##","content":" We recommend the remi repo to get the latest php packages.  ## Install Repos dnf install epel-release dnf install https://rpms.remirepo.net/enterprise/remi-release-8.rpm dnf module enable php:remi-8.1 ## Get dnf updates dnf update -y ## Install PHP 8.1 dnf install -y php php-{common,fpm,cli,json,mysqlnd,gd,mbstring,pdo,zip,bcmath,dom,opcache}   ","version":"Next","tagName":"h3"},{"title":"Composer","type":1,"pageTitle":"CentOS 8, Rocky Linux 8, AlmaLinux 8","url":"/pterodactyl-documentation/docs/community/panel/install/centos8/##","content":" dnf install -y zip unzip tar # Required for Composer curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer   ","version":"Next","tagName":"h3"},{"title":"Install Utility Packages","type":1,"pageTitle":"CentOS 8, Rocky Linux 8, AlmaLinux 8","url":"/pterodactyl-documentation/docs/community/panel/install/centos8/##","content":" ","version":"Next","tagName":"h2"},{"title":"Nginx","type":1,"pageTitle":"CentOS 8, Rocky Linux 8, AlmaLinux 8","url":"/pterodactyl-documentation/docs/community/panel/install/centos8/##","content":" dnf install -y nginx firewall-cmd --add-service=http --permanent firewall-cmd --add-service=https --permanent firewall-cmd --reload   ","version":"Next","tagName":"h3"},{"title":"Redis","type":1,"pageTitle":"CentOS 8, Rocky Linux 8, AlmaLinux 8","url":"/pterodactyl-documentation/docs/community/panel/install/centos8/##","content":" dnf install -y redis systemctl start redis systemctl enable redis   SELinux commands  The following command will allow nginx to work with redis and  setsebool -P httpd_can_network_connect 1 setsebool -P httpd_execmem 1 setsebool -P httpd_unified 1   ","version":"Next","tagName":"h3"},{"title":"Server Configuration","type":1,"pageTitle":"CentOS 8, Rocky Linux 8, AlmaLinux 8","url":"/pterodactyl-documentation/docs/community/panel/install/centos8/##","content":" This following section covers the configuration of parts of the server to run the panel.  ","version":"Next","tagName":"h2"},{"title":"Configuring MariaDB","type":1,"pageTitle":"CentOS 8, Rocky Linux 8, AlmaLinux 8","url":"/pterodactyl-documentation/docs/community/panel/install/centos8/##","content":" The fastest way to set up mariadb is to use the mysql_secure_installation command and follow prompts  mysql_secure_installation   The following are safe defaults.  Change to your own secure password Set root password? [Y/n] Y  Get rid of users that could access the db by default Remove anonymous users? [Y/n] Y  Keep root off the external interfaces Disallow root login remotely? [Y/n] Y  Extra databases that aren't needed Remove test database and access to it? [Y/n] Y  Clears and sets all the changes made Reload privilege tables now? [Y/n] Y  All done! If you've completed all of the above steps, your MariaDB installation should now be secure.  Adding MariaDB user  To add your first user to the database, see our tutorial on setting up MySQL.  ","version":"Next","tagName":"h3"},{"title":"Setup PHP","type":1,"pageTitle":"CentOS 8, Rocky Linux 8, AlmaLinux 8","url":"/pterodactyl-documentation/docs/community/panel/install/centos8/##","content":" Place the contents below in a file inside the /etc/php-fpm.d folder. The file can be named anything, but a good standard is www-pterodactyl.conf. This config will match the nginx config later in the guide.  Start and enable php-fpm on the system.  systemctl enable php-fpm systemctl start php-fpm   ","version":"Next","tagName":"h3"},{"title":"Nginx","type":1,"pageTitle":"CentOS 8, Rocky Linux 8, AlmaLinux 8","url":"/pterodactyl-documentation/docs/community/panel/install/centos8/##","content":" Please check our tutorial on generating SSL certificates for more information.  SSL Configuration  ","version":"Next","tagName":"h3"},{"title":"Redis Setup","type":1,"pageTitle":"CentOS 8, Rocky Linux 8, AlmaLinux 8","url":"/pterodactyl-documentation/docs/community/panel/install/centos8/##","content":" The default Redis install is perfectly fine for the panel. If you have Redis already in use you may want to look intorunning another Redis instance.  ","version":"Next","tagName":"h3"},{"title":"Installing the Panel","type":1,"pageTitle":"CentOS 8, Rocky Linux 8, AlmaLinux 8","url":"/pterodactyl-documentation/docs/community/panel/install/centos8/##","content":" Excellent, we now have all of the required dependencies installed and configured. From here, follow the official Panel installation documentation. ","version":"Next","tagName":"h2"},{"title":"Creating a New Node","type":0,"sectionRef":"#","url":"/pterodactyl-documentation/docs/community/tutorials/node/","content":"","keywords":"","version":"Next"},{"title":"Location","type":1,"pageTitle":"Creating a New Node","url":"/pterodactyl-documentation/docs/community/tutorials/node/##","content":" Head to the admin panel and click the Nodes tab on the left sidebar. After that, click 'Create New' on the top right side to open the page to add a node.    ","version":"Next","tagName":"h2"},{"title":"Information Required","type":1,"pageTitle":"Creating a New Node","url":"/pterodactyl-documentation/docs/community/tutorials/node/##","content":"   Name: a quick identifiable name for the node.Description: a long description that is used to help you identify the node.Location: the location you want the node in. These are configured in the 'Locations' section of the panel and one must be created before a node can be created. These simply act as categories for nodes and serve no other purpose at this time.FQDN: the fully qualified domain name for the node ‚Äî for example: node.pterodactyl.ioCommunicate over SSL: if the panel is using SSL the Daemon is required to use SSL as well.Behind Proxy: if you have the Daemon behind a proxy that terminates SSL connections before arriving at the Daemon then this option should be selected. If none of that sentence made sense, this doesn't affect you.Server File Directory: the location on the physical server where the daemon is to store the files the servers generate. By default this is /var/lib/pterodactyl/volumes.  Some OVH users regularly have their /home folder be the largest filesystem. You may want to change to use/home/pterodactyl/volumes if you are on a default OVH box.  Total Memory: the total amount of RAM the node should be able to allocate automatically.Memory Overallocate: the percentage of RAM to over-allocate on a node. For example, if you have set a 10GB memory limit, with a 20% overallocation, the Panel will allocate up to 12GB of memory on this node in total.Total Disk Space: the total amount of disk space the node should be able to allocate automatically.Disk Overallocate: works the same way as memory overallocation.  Don't forget to account for OS overhead and other software requirements on machines.  Daemon Port: the port that the Daemon should listen on.Daemon SFTP Port: the port the Daemon sftp-server or standalone SFTP server should listen on.  ","version":"Next","tagName":"h2"},{"title":"Install the Wings","type":1,"pageTitle":"Creating a New Node","url":"/pterodactyl-documentation/docs/community/tutorials/node/##","content":" At this point you'll need to have the Daemon installed on your machine. Check out the documentationfor more information, or try one of the community guides for CentOS,Ubuntu, or Debian.  ","version":"Next","tagName":"h2"},{"title":"Configuring the Node","type":1,"pageTitle":"Creating a New Node","url":"/pterodactyl-documentation/docs/community/tutorials/node/##","content":" Go to the Node Configuration page    Copy and paste the config into the config.yml file. (Default location is /etc/pterodactyl/config.yml)  ","version":"Next","tagName":"h2"},{"title":"Auto-Deploy","type":1,"pageTitle":"Creating a New Node","url":"/pterodactyl-documentation/docs/community/tutorials/node/##","content":" This will generate a command to run on the node server to configure the daemon for you. ","version":"Next","tagName":"h3"},{"title":"Artisan CLI","type":0,"sectionRef":"#","url":"/pterodactyl-documentation/docs/community/tutorials/artisan/","content":"","keywords":"","version":"Next"},{"title":"User Management","type":1,"pageTitle":"Artisan CLI","url":"/pterodactyl-documentation/docs/community/tutorials/artisan/##","content":" When running any of the following commands, you can either use the options or don't pass through anything and use the interactive prompt. You can also do both passing through options and using interactive prompts as well.  ","version":"Next","tagName":"h2"},{"title":"Create User","type":1,"pageTitle":"Artisan CLI","url":"/pterodactyl-documentation/docs/community/tutorials/artisan/##","content":" php artisan p:user:make {--email=user@example.com} {--username=myusername} {--name-first=My} {--name-last=Name} {--password=supersecret} {--admin=1|0} {--no-password}   ","version":"Next","tagName":"h3"},{"title":"Delete User","type":1,"pageTitle":"Artisan CLI","url":"/pterodactyl-documentation/docs/community/tutorials/artisan/##","content":" php artisan p:user:delete {--user=username/email/UUID}   ","version":"Next","tagName":"h3"},{"title":"Disable 2FA","type":1,"pageTitle":"Artisan CLI","url":"/pterodactyl-documentation/docs/community/tutorials/artisan/##","content":" Disabling 2-factor authentication should only be used as a last resort for user recovery. Please use this with caution.  php artisan p:user:disable2fa {--email=user@example.com}   ","version":"Next","tagName":"h3"},{"title":"Server & Node Management","type":1,"pageTitle":"Artisan CLI","url":"/pterodactyl-documentation/docs/community/tutorials/artisan/##","content":" ","version":"Next","tagName":"h2"},{"title":"Create Location","type":1,"pageTitle":"Artisan CLI","url":"/pterodactyl-documentation/docs/community/tutorials/artisan/##","content":" php artisan p:location:make {--short=us1} {--long=&quot;A description of this location.&quot;}   ","version":"Next","tagName":"h3"},{"title":"Delete Location","type":1,"pageTitle":"Artisan CLI","url":"/pterodactyl-documentation/docs/community/tutorials/artisan/##","content":" php artisan p:location:delete {--short=us1}   ","version":"Next","tagName":"h3"},{"title":"Server Bulk Power","type":1,"pageTitle":"Artisan CLI","url":"/pterodactyl-documentation/docs/community/tutorials/artisan/##","content":" php artisan p:server:bulk-power &lt;start, stop, kill, restart&gt; {--servers=1,2,3} {--nodes=1,2,3}   ","version":"Next","tagName":"h3"},{"title":"Panel Management","type":1,"pageTitle":"Artisan CLI","url":"/pterodactyl-documentation/docs/community/tutorials/artisan/##","content":" ","version":"Next","tagName":"h2"},{"title":"View Panel Info","type":1,"pageTitle":"Artisan CLI","url":"/pterodactyl-documentation/docs/community/tutorials/artisan/##","content":" php artisan p:info   Displays a variety of panel information that can be used to check the configuration of things such as database and email.  ","version":"Next","tagName":"h3"},{"title":"Update Panel","type":1,"pageTitle":"Artisan CLI","url":"/pterodactyl-documentation/docs/community/tutorials/artisan/##","content":" php artisan p:upgrade {--user=www-data} {--group=www-data} {--url=https://example.com/panel.tar.gz} {--release=latest} {--skip-download}   Downloads a new archive for Pterodactyl and executes the normal upgrade commands. ","version":"Next","tagName":"h3"},{"title":"CWings Installation","type":0,"sectionRef":"#","url":"/pterodactyl-documentation/docs/community/wings/","content":"CWings Installation üìÑÔ∏è CentOS 7 In this guide we will install Pterodactyl's Wings v1.X ‚Äî including all of it's dependencies ‚Äî and configure it to use a SSL connection. üìÑÔ∏è CentOS 8, Rocky Linux 8, AlmaLinux 8 In this guide we will install Pterodactyl's Wings v1.X ‚Äî including all of it's dependencies ‚Äî and configure it to use a SSL connection. üìÑÔ∏è Debian 11 &amp; 12 Install","keywords":"","version":"Next"},{"title":"CentOS 7","type":0,"sectionRef":"#","url":"/pterodactyl-documentation/docs/community/panel/install/centos7/","content":"","keywords":"","version":"Next"},{"title":"Install Requirements and Additional Utilities","type":1,"pageTitle":"CentOS 7","url":"/pterodactyl-documentation/docs/community/panel/install/centos7/##","content":" We will install all of Pterodactyl's required dependencies and a few aditional utilities.  If you run sestatus and it shows SELinux status: enabled you should install the following packages for later  ","version":"Next","tagName":"h2"},{"title":"Tutorials","type":0,"sectionRef":"#","url":"/pterodactyl-documentation/docs/community/tutorials/","content":"Tutorials üìÑÔ∏è Creating a New Node Location üìÑÔ∏è Artisan CLI The Artisan CLI, command line interface, is part of the Laravel framework, which Pterodactyl is built on. The Artisan file is located in /var/www/pterodactyl if you followed the official guide. This guide goes over some more Pterodactyl specific/related Artisan commands, which are all prefixed with the letter p (e.g. pmake). If you'd like to view all commands, you can do so by running:","keywords":"","version":"Next"},{"title":"SELinux tools","type":1,"pageTitle":"CentOS 7","url":"/pterodactyl-documentation/docs/community/panel/install/centos7/##","content":" yum install -y policycoreutils policycoreutils-python selinux-policy selinux-policy-targeted libselinux-utils setroubleshoot-server setools setools-console mcstrans   ","version":"Next","tagName":"h3"},{"title":"MariaDB","type":1,"pageTitle":"CentOS 7","url":"/pterodactyl-documentation/docs/community/panel/install/centos7/##","content":" ## Install Repos cat &lt;&lt;EOF &gt; /etc/yum.repos.d/mariadb.repo # MariaDB 10.5 CentOS repository list - created 2017-07-14 12:40 UTC # http://downloads.mariadb.org/mariadb/repositories/ [mariadb] name = MariaDB baseurl = http://yum.mariadb.org/10.5/centos7-amd64 gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB gpgcheck=1 EOF ## Get yum updates yum update -y ## Install MariaDB 10.5 yum install -y MariaDB-common MariaDB-server ## Start maraidb systemctl start mariadb systemctl enable mariadb   ","version":"Next","tagName":"h3"},{"title":"PHP 8.1","type":1,"pageTitle":"CentOS 7","url":"/pterodactyl-documentation/docs/community/panel/install/centos7/##","content":" We recommend the remi repo to get the latest php packages.  ## Install Repos yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm yum -y install https://rpms.remirepo.net/enterprise/remi-release-7.rpm yum install -y yum-utils yum-config-manager --disable 'remi-php*' yum-config-manager --enable remi-php81 ## Get yum updates yum update -y ## Install PHP 8.1 yum install -y php php-{common,fpm,cli,json,mysqlnd,mcrypt,gd,mbstring,pdo,zip,bcmath,dom,opcache}   ","version":"Next","tagName":"h3"},{"title":"Composer","type":1,"pageTitle":"CentOS 7","url":"/pterodactyl-documentation/docs/community/panel/install/centos7/##","content":" yum install -y zip unzip # Required for Composer curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer   ","version":"Next","tagName":"h3"},{"title":"Install Utility Packages","type":1,"pageTitle":"CentOS 7","url":"/pterodactyl-documentation/docs/community/panel/install/centos7/##","content":" ","version":"Next","tagName":"h2"},{"title":"Nginx","type":1,"pageTitle":"CentOS 7","url":"/pterodactyl-documentation/docs/community/panel/install/centos7/##","content":" yum install -y nginx firewall-cmd --add-service=http --permanent firewall-cmd --add-service=https --permanent firewall-cmd --reload   ","version":"Next","tagName":"h3"},{"title":"Redis","type":1,"pageTitle":"CentOS 7","url":"/pterodactyl-documentation/docs/community/panel/install/centos7/##","content":" yum install -y --enablerepo=remi redis systemctl start redis systemctl enable redis   SELinux commands  The following command will allow nginx to work with redis and  setsebool -P httpd_can_network_connect 1 setsebool -P httpd_execmem 1 setsebool -P httpd_unified 1   ","version":"Next","tagName":"h3"},{"title":"Server Configuration","type":1,"pageTitle":"CentOS 7","url":"/pterodactyl-documentation/docs/community/panel/install/centos7/##","content":" This following section covers the configuration of parts of the server to run the panel.  ","version":"Next","tagName":"h2"},{"title":"Configuring MariaDB","type":1,"pageTitle":"CentOS 7","url":"/pterodactyl-documentation/docs/community/panel/install/centos7/##","content":" The fastest way to set up mariadb is to use the mysql_secure_installation command and follow prompts  mysql_secure_installation   The following are safe defaults.  Change to your own secure password Set root password? [Y/n] Y  Get rid of users that could access the db by default Remove anonymous users? [Y/n] Y  Keep root off the external interfaces Disallow root login remotely? [Y/n] Y  Extra databases that aren't needed Remove test database and access to it? [Y/n] Y  Clears and sets all the changes made Reload privilege tables now? [Y/n] Y  All done! If you've completed all of the above steps, your MariaDB installation should now be secure.  Adding MariaDB user  To add your first user to the database, see our tutorial on setting up MySQL.  ","version":"Next","tagName":"h3"},{"title":"CentOS 7","type":0,"sectionRef":"#","url":"/pterodactyl-documentation/docs/community/wings/install/centos7/","content":"","keywords":"","version":"Next"},{"title":"Install Requirements","type":1,"pageTitle":"CentOS 7","url":"/pterodactyl-documentation/docs/community/wings/install/centos7/##","content":" We will first begin by installing all of Wings' required dependencies.  ","version":"Next","tagName":"h2"},{"title":"Docker","type":1,"pageTitle":"CentOS 7","url":"/pterodactyl-documentation/docs/community/wings/install/centos7/##","content":" ## Install yum tools yum install -y yum-utils device-mapper-persistent-data lvm2 ## Add the docker repo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo ## Install docker yum install -y docker-ce docker-ce-cli ## Enable docker service systemctl enable docker systemctl start docker   ","version":"Next","tagName":"h3"},{"title":"FirewallD Changes","type":1,"pageTitle":"CentOS 7","url":"/pterodactyl-documentation/docs/community/wings/install/centos7/##","content":" firewall-cmd --add-port 8080/tcp --permanent firewall-cmd --add-port 2022/tcp --permanent firewall-cmd --permanent --zone=trusted --change-interface=docker0 firewall-cmd --zone=trusted --add-masquerade --permanent firewall-cmd --reload   ","version":"Next","tagName":"h3"},{"title":"Installing Wings","type":1,"pageTitle":"CentOS 7","url":"/pterodactyl-documentation/docs/community/wings/install/centos7/##","content":" Great, now all of the dependencies and firewall rules have been dealt with. From here follow the official Wings installation documentation. ","version":"Next","tagName":"h2"},{"title":"Setup PHP","type":1,"pageTitle":"CentOS 7","url":"/pterodactyl-documentation/docs/community/panel/install/centos7/##","content":" Place the contents below in a file inside the /etc/php-fpm.d folder. The file can be named anything, but a good standard is www-pterodactyl.conf. This config will match the nginx config later in the guide.  Start and enable php-fpm on the system.  systemctl enable php-fpm systemctl start php-fpm   ","version":"Next","tagName":"h3"},{"title":"Nginx","type":1,"pageTitle":"CentOS 7","url":"/pterodactyl-documentation/docs/community/panel/install/centos7/##","content":" Please check our tutorial on generating SSL certificates for more information.  SSL Configuration  ","version":"Next","tagName":"h3"},{"title":"Redis Setup","type":1,"pageTitle":"CentOS 7","url":"/pterodactyl-documentation/docs/community/panel/install/centos7/##","content":" The default Redis install is perfectly fine for the panel. If you have Redis already in use you may want to look intorunning another Redis instance.  ","version":"Next","tagName":"h3"},{"title":"Installing the Panel","type":1,"pageTitle":"CentOS 7","url":"/pterodactyl-documentation/docs/community/panel/install/centos7/##","content":" Excellent, we now have all of the required dependencies installed and configured. From here, follow the official Panel installation documentation. ","version":"Next","tagName":"h2"},{"title":"CentOS 8, Rocky Linux 8, AlmaLinux 8","type":0,"sectionRef":"#","url":"/pterodactyl-documentation/docs/community/wings/install/centos8/","content":"","keywords":"","version":"Next"},{"title":"Install Requirements","type":1,"pageTitle":"CentOS 8, Rocky Linux 8, AlmaLinux 8","url":"/pterodactyl-documentation/docs/community/wings/install/centos8/##","content":" We will first begin by installing all of the Wings' required dependencies.  ","version":"Next","tagName":"h2"},{"title":"Docker","type":1,"pageTitle":"CentOS 8, Rocky Linux 8, AlmaLinux 8","url":"/pterodactyl-documentation/docs/community/wings/install/centos8/##","content":" ## Install yum tools dnf install -y dnf-utils device-mapper-persistent-data lvm2 ## Add the docker repo dnf config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.repo ## Install docker dnf install -y docker-ce --nobest ## Enable docker service systemctl enable docker systemctl start docker   ","version":"Next","tagName":"h3"},{"title":"FirewallD Changes","type":1,"pageTitle":"CentOS 8, Rocky Linux 8, AlmaLinux 8","url":"/pterodactyl-documentation/docs/community/wings/install/centos8/##","content":" firewall-cmd --add-port 8080/tcp --permanent firewall-cmd --add-port 2022/tcp --permanent firewall-cmd --permanent --zone=trusted --change-interface=pterodactyl0 firewall-cmd --zone=trusted --add-masquerade --permanent firewall-cmd --reload   ","version":"Next","tagName":"h3"},{"title":"Installing Wings","type":1,"pageTitle":"CentOS 8, Rocky Linux 8, AlmaLinux 8","url":"/pterodactyl-documentation/docs/community/wings/install/centos8/##","content":" Great, now all of the dependencies and firewall rules have been dealt with. From here follow the official Wings installation documentation.  If you have SELinux enforcement enabled and you are getting AVC denials from your containers, try relocating your Wings data directory from /var/lib/pterodactyl to /var/srv/containers/pterodactyl. That is where the targeted policy expects Docker to read and write data from. ","version":"Next","tagName":"h2"},{"title":"Customization","type":0,"sectionRef":"#","url":"/pterodactyl-documentation/docs/customization/","content":"Customization üìÑÔ∏è Building Panel Assets Do not run the following steps on your production nodes. üìÑÔ∏è Building Wings Do not run the following steps on your production nodes.","keywords":"","version":"Next"},{"title":"Debian 11 & 12","type":0,"sectionRef":"#","url":"/pterodactyl-documentation/docs/community/wings/install/debian/","content":"","keywords":"","version":"Next"},{"title":"Install","type":1,"pageTitle":"Debian 11 & 12","url":"/pterodactyl-documentation/docs/community/wings/install/debian/##","content":" There is no additional configuration required for Wings on Debian 11 or 12. You can follow the official Wings install documentation, which covers Docker installation for Debian. ","version":"Next","tagName":"h2"},{"title":"Building Wings","type":0,"sectionRef":"#","url":"/pterodactyl-documentation/docs/customization/wings/","content":"","keywords":"","version":"Next"},{"title":"Build Requirements","type":1,"pageTitle":"Building Wings","url":"/pterodactyl-documentation/docs/customization/wings/##","content":" An up to date version of Go is required to compile Wings. The minimum version can be found at the top of the go.mod file. See the official instructions for help with installing Go.  ","version":"Next","tagName":"h2"},{"title":"Building","type":1,"pageTitle":"Building Wings","url":"/pterodactyl-documentation/docs/customization/wings/##","content":" Execute the following command in your local clone of the repository to compile Wings into a binary.  go build   You should now have a wings binary file in your wings directory.  ","version":"Next","tagName":"h2"},{"title":"Install the new binary","type":1,"pageTitle":"Building Wings","url":"/pterodactyl-documentation/docs/customization/wings/##","content":" Some the following commands require root permissions. Prepend them with sudo if you are not logged in as root.  Backup the current installation of wings  mv /usr/local/bin/wings /usr/local/bin/wings-backup   Place the new binary in /usr/local/bin  cp ./wings /usr/local/bin   Restart wings  systemctl restart wings   ","version":"Next","tagName":"h2"},{"title":"Troubleshooting","type":1,"pageTitle":"Building Wings","url":"/pterodactyl-documentation/docs/customization/wings/##","content":" If the wings service does not start properly, you can try to start Wings in a console window.  wings --debug   Remember to stop the system service before, and re-enable it afterwards.  systemctl stop wings systemctl start wings  ","version":"Next","tagName":"h2"},{"title":"Creating Eggs","type":0,"sectionRef":"#","url":"/pterodactyl-documentation/docs/eggs/","content":"Creating Eggs üìÑÔ∏è Creating a Custom Egg You should not edit existing services or options that ship with the Panel. Each upgrade we push can make minor üìÑÔ∏è Creating a Custom Docker Image This tutorial uses examples from our yolks:java_17 docker image,","keywords":"","version":"Next"},{"title":"Building Panel Assets","type":0,"sectionRef":"#","url":"/pterodactyl-documentation/docs/customization/panel/","content":"","keywords":"","version":"Next"},{"title":"Install Dependencies","type":1,"pageTitle":"Building Panel Assets","url":"/pterodactyl-documentation/docs/customization/panel/##","content":" The following commands will install the necessary dependencies for building the Panel assets.  The build tools require NodeJS, yarn is used as the package manager.  # Ubuntu/Debian sudo mkdir -p /etc/apt/keyrings curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg echo &quot;deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_16.x nodistro main&quot; | sudo tee /etc/apt/sources.list.d/nodesource.list sudo apt update sudo apt install -y nodejs # CentOS sudo yum install https://rpm.nodesource.com/pub_16.x/nodistro/repo/nodesource-release-nodistro-1.noarch.rpm -y sudo yum install nodejs -y   Install required javascript packages.  npm i -g yarn # Install Yarn cd /var/www/pterodactyl yarn # Installs panel build dependencies   ","version":"Next","tagName":"h2"},{"title":"Build Panel Assets","type":1,"pageTitle":"Building Panel Assets","url":"/pterodactyl-documentation/docs/customization/panel/##","content":" The following command will rebuild the Panel frontend. For NodeJS version 17 and above, you must enable the --openssl-legacy-provider option before building.  cd /var/www/pterodactyl export NODE_OPTIONS=--openssl-legacy-provider # for NodeJS v17+ yarn build:production # Build panel   You can use command yarn run watch to view the progress of your changes in almost real-time for easier development. Once you're satisfied with your changes build the panel using the previously mentioned yarn build:production command. ","version":"Next","tagName":"h2"},{"title":"Game Configuration","type":0,"sectionRef":"#","url":"/pterodactyl-documentation/docs/games/","content":"Game Configuration üìÑÔ∏è Minecraft Configuring a Server Network (BungeeCord, Waterfall, HexaCord, etc.)","keywords":"","version":"Next"},{"title":"Guides","type":0,"sectionRef":"#","url":"/pterodactyl-documentation/docs/guides/","content":"Guides üìÑÔ∏è Using Mounts Mounts is a feature that allows administrators to mount other directories from the host file-system into a Server's container. üìÑÔ∏è Upgrading PHP This documentation includes instructions for upgrading your system to the latest version of PHP. Please reference the","keywords":"","version":"Next"},{"title":"Creating a Custom Docker Image","type":0,"sectionRef":"#","url":"/pterodactyl-documentation/docs/eggs/image/","content":"","keywords":"","version":"Next"},{"title":"Creating the Dockerfile","type":1,"pageTitle":"Creating a Custom Docker Image","url":"/pterodactyl-documentation/docs/eggs/image/##","content":" The most important part of this process is to create the Dockerfilethat will be used by the Daemon. Due to heavy restrictions on server containers, you must setup this file in a specific manner.  We try to use a Debian based OS as much as possible for our images  FROM --platform=$TARGETOS/$TARGETARCH eclipse-temurin:17-jdk-jammy LABEL author=&quot;Matthew Penner&quot; maintainer=&quot;matthew@pterodactyl.io&quot; LABEL org.opencontainers.image.source=&quot;https://github.com/pterodactyl/yolks&quot; LABEL org.opencontainers.image.licenses=MIT RUN apt-get update -y \\ &amp;&amp; apt-get install -y lsof curl ca-certificates openssl git tar sqlite3 fontconfig libfreetype6 tzdata iproute2 libstdc++6 \\ &amp;&amp; useradd -d /home/container -m container USER container ENV USER=container HOME=/home/container WORKDIR /home/container COPY ./../entrypoint.sh /entrypoint.sh CMD [ &quot;/bin/bash&quot;, &quot;/entrypoint.sh&quot; ]   Lets walk through the Dockerfile above. The first thing you'll notice is the FROM declaration.  FROM --platform=$TARGETOS/$TARGETARCH eclipse-temurin:17-jdk-jammy   The --platform=$TARGETOS/$TARGETARCH allows us to specify in the github workflow that we want to build for linux/amd64 and linux/arm64. See Docker docs  In this case, we are using eclipse-temurin:17-jdk-jammy which provides us with Java 17.  ","version":"Next","tagName":"h2"},{"title":"Installing Dependencies","type":1,"pageTitle":"Creating a Custom Docker Image","url":"/pterodactyl-documentation/docs/eggs/image/##","content":" The next thing we do is install the dependencies we will need using Debian/Ubuntu's package manager: apt. You'll notice some specific flags -y as the docker build is non interactive, as well as everything being contained in a single RUN block.  The dependency iproute2 is required in every docker container to make the ip command work  ","version":"Next","tagName":"h2"},{"title":"Files In The Docker Image","type":1,"pageTitle":"Creating a Custom Docker Image","url":"/pterodactyl-documentation/docs/eggs/image/##","content":" Because the way that Pterodactyl works, it is not possible to store any files within the Docker image at /home/container.  All files must be downloaded with the egg install script, this means for example that you can not put your bot files or minecraft server jars in the Docker image as you can with regular docker images.  ","version":"Next","tagName":"h2"},{"title":"Creating a Container User","type":1,"pageTitle":"Creating a Custom Docker Image","url":"/pterodactyl-documentation/docs/eggs/image/##","content":" Within this RUN block, you'll notice the useradd command.   useradd -d /home/container -m container   All Pterodactyl containers must have a user named container, and the user home must be /home/container.  After we create that user, we then define the default container USERas well as a few ENV settings to be applied to things running within the container.  ","version":"Next","tagName":"h2"},{"title":"Work Directory & Entrypoint","type":1,"pageTitle":"Creating a Custom Docker Image","url":"/pterodactyl-documentation/docs/eggs/image/##","content":" One of the last things we do is define a WORKDIR which is where everything else will be executed. The WORKDIR must be set the /home/container.  Finally, we need to copy our ENTRYPOINT script into the docker image root. This is done using COPY, after which we define the command to be used when the container is started using CMD. The CMD line should always point to the entrypoint.sh file.  COPY ./../entrypoint.sh /entrypoint.sh CMD [ &quot;/bin/bash&quot;, &quot;/entrypoint.sh&quot; ]   ","version":"Next","tagName":"h2"},{"title":"Entrypoint Script","type":1,"pageTitle":"Creating a Custom Docker Image","url":"/pterodactyl-documentation/docs/eggs/image/##","content":" In order to complete this Dockerfile, we will need an entrypoint.sh file which tells Docker how to run this specific server type.  These entrypoint files are actually fairly abstracted, and the Daemon will pass in the start command as an environment variable before processing it and then executing the command.  # Default the TZ environment variable to UTC. TZ=${TZ:-UTC} export TZ # Set environment variable that holds the Internal Docker IP INTERNAL_IP=$(ip route get 1 | awk '{print $(NF-2);exit}') export INTERNAL_IP # Switch to the container's working directory cd /home/container || exit 1 # Print Java version printf &quot;\\033[1m\\033[33mcontainer@pterodactyl~ \\033[0mjava -version\\n&quot; java -version # Convert all of the &quot;{{VARIABLE}}&quot; parts of the command into the expected shell # variable format of &quot;${VARIABLE}&quot; before evaluating the string and automatically # replacing the values. PARSED=$(echo &quot;${STARTUP}&quot; | sed -e 's/{{/${/g' -e 's/}}/}/g' | eval echo &quot;$(cat -)&quot;) # Display the command we're running in the output, and then execute it with the env # from the container itself. printf &quot;\\033[1m\\033[33mcontainer@pterodactyl~ \\033[0m%s\\n&quot; &quot;$PARSED&quot; # shellcheck disable=SC2086 exec env ${PARSED}   First we set the timezone.  TZ=${TZ:-UTC} export TZ   Then we make the internal ip avaible in the docker container.  INTERNAL_IP=$(ip route get 1 | awk '{print $(NF-2);exit}') export INTERNAL_IP   The third command, cd /home/container, simply ensures we are in the correct directory when running the rest of the commands. We then follow that up with java -version to output this information to end-users, but that is not necessary.  ","version":"Next","tagName":"h2"},{"title":"Modifying the Startup Command","type":1,"pageTitle":"Creating a Custom Docker Image","url":"/pterodactyl-documentation/docs/eggs/image/##","content":" The most significant part of this file is the MODIFIED_STARTUP environment variable. What we are doing in this case is parsing the environment STARTUP that is passed into the container by the Daemon. In most cases, this variable looks something like the example below:  STARTUP=&quot;java -Xms128M -XX:MaxRAMPercentage=95.0 -jar {{SERVER_JARFILE}}&quot;   You'll notice some placeholders there, specifically {{SERVER_JARFILE}}. These refer to other environment variables being passed in, and they look something like the example below.  SERVER_JARFILE=server.jar   There are a host of different environment variables, and they change depending on the specific service option configuration. However, that is not necessarily anything to worry about here.  PARSED=$(echo &quot;${STARTUP}&quot; | sed -e 's/{{/${/g' -e 's/}}/}/g' | eval echo &quot;$(cat -)&quot;)   The command above simply evaluates the STARTUP environment variable, and then replaces anything surrounded in curly braces {{EXAMPLE}} with a matching environment variable (such as EXAMPLE). Thus, our STARTUP command:  java -Xms128M -XX:MaxRAMPercentage=95.0 -jar {{SERVER_JARFILE}}   Becomes:  java -Xms128M -XX:MaxRAMPercentage=95.0 -jar server.jar   ","version":"Next","tagName":"h2"},{"title":"Run the Command","type":1,"pageTitle":"Creating a Custom Docker Image","url":"/pterodactyl-documentation/docs/eggs/image/##","content":" The last step is to run this modified startup command, which is done with the line exec env ${PARSED}.  ","version":"Next","tagName":"h2"},{"title":"Note","type":1,"pageTitle":"Creating a Custom Docker Image","url":"/pterodactyl-documentation/docs/eggs/image/##","content":" Sometimes you may need to change the permissions of the entrypoint.sh file, on linux you can do this by executing chmod +x entrypoint.sh in the directory where the file is. ","version":"Next","tagName":"h3"},{"title":"Using Mounts","type":0,"sectionRef":"#","url":"/pterodactyl-documentation/docs/guides/mounts/","content":"","keywords":"","version":"Next"},{"title":"Wings Configuration","type":1,"pageTitle":"Using Mounts","url":"/pterodactyl-documentation/docs/guides/mounts/##","content":" For security reasons it is not possible to mount directories on a node by default. Directories that should be mountable have to be specified explicitly in the Wings configuration.  In the Wings configuration file (/etc/pterodactyl/config.yml) the allowed_mounts field is used to list mountable directories. The listed directories and all their subdirectories can be mounted.  allowed_mounts: - /example   You have to restart Wings to apply new changes to your Wings config.  ","version":"Next","tagName":"h2"},{"title":"Panel Configuration","type":1,"pageTitle":"Using Mounts","url":"/pterodactyl-documentation/docs/guides/mounts/##","content":" You have to configure mounts in admin Panel in order to use them with your servers. They consist of a source pad on the node and a target path where it will be mounted in the container.  Mounts cannot be mounted to or inside of /home/container or any subdirectory of it, nor can you cross-mount servers such as Server A's directory into Server B.  ","version":"Next","tagName":"h2"},{"title":"Creating a Mount","type":1,"pageTitle":"Using Mounts","url":"/pterodactyl-documentation/docs/guides/mounts/##","content":" In the admin Panel go to Mounts.Create a new mount.Fill in the details as required. Name: Name for your mount.Description: Description for your mount.Source: The absolute path to the folder or files on the Node machine.Target: The absolute path where the mount will be placed inside of your server, can not include /home/container in the path.Read Only: Whether the mount will be read-only for the servers using it.User Mountable: Whether to allow users to self mount this mount. After creating the mount, you are required to add both Eggs and Nodes that this mount may be used on.  All servers using the same mounts will only share their contents when they are on the same node. Mounts are not synchronized between nodes.  ","version":"Next","tagName":"h3"},{"title":"Assigning a Mount to a Server","type":1,"pageTitle":"Using Mounts","url":"/pterodactyl-documentation/docs/guides/mounts/##","content":" In the admin Panel navigate to the server you would like to use a mount withGo to the mounts pageClick the + buttonRestart the server  The files of the mount should become available in the target path in the container. You can temporarily change your server startup command to ls &lt;mount target&gt;, which should output the contents of the mount if configured correctly.  Mounts do not appear in the Panel's file manager, nor are they accessible via SFTP. However, the server itself will be able to see and use the mounts.  ","version":"Next","tagName":"h3"},{"title":"Example Mount","type":1,"pageTitle":"Using Mounts","url":"/pterodactyl-documentation/docs/guides/mounts/##","content":" The example mount below is stored in the path /var/lib/pterodactyl/mounts, which we add to the Wings config.yml  allowed_mounts: - /var/lib/pterodactyl/mounts    ","version":"Next","tagName":"h3"},{"title":"Minecraft","type":0,"sectionRef":"#","url":"/pterodactyl-documentation/docs/games/minecraft/","content":"","keywords":"","version":"Next"},{"title":"Configuring a Server Network (BungeeCord, Waterfall, HexaCord, etc.)","type":1,"pageTitle":"Minecraft","url":"/pterodactyl-documentation/docs/games/minecraft/##","content":" If you want to operate Minecraft proxy servers like BungeeCord, Waterfall, HexaCord, etc. securely, you can do so with pterodactyl alone as long as you stay on the same node. It differs from a traditional setup in a few ways and might require additonal firewall rules, which is what this guide is for.  For the setup described below, it is necessary that all servers are on the same node.  If you are a hosting provider, you should only allow a single proxy network per node, if you are selling them to customers.  ","version":"Next","tagName":"h2"},{"title":"Allocations in the Panel","type":1,"pageTitle":"Minecraft","url":"/pterodactyl-documentation/docs/games/minecraft/##","content":" Create a regular allocation for the proxy server which uses the external IP of the node, so users can reach it.  The actual game servers behind the proxy should use allocations with 127.0.0.1 as the address, so they are only reachable on the node, and not from the public.  Example    10.1.70.62 is an example, replace it with your own public IP address.  ","version":"Next","tagName":"h3"},{"title":"proxy server settings","type":1,"pageTitle":"Minecraft","url":"/pterodactyl-documentation/docs/games/minecraft/##","content":" As the proxy server, like all servers, is running in a docker container with network isolation, localhost/127.0.0.1 doesn't refer to the node, but to the container. The node can be reached from within the container using 172.18.0.1 (unless the pterodactyl network is configured differently) instead. You therefore need to use this IP in your proxy server configuration.  bungeecord/waterfall configuration  This will be different for other proxy servers, please refer to their documentation.    ","version":"Next","tagName":"h3"},{"title":"paper/spigot/bukkit settings","type":1,"pageTitle":"Minecraft","url":"/pterodactyl-documentation/docs/games/minecraft/##","content":" The servers itself require the regular config options required by server proxies, which usually comes down to disabling online mode. This will differ for other server software, please refer to their documentation.  server.properties  set online-mode false  spigot.yml  set bungeecord to true  ","version":"Next","tagName":"h3"},{"title":"Firewalls","type":1,"pageTitle":"Minecraft","url":"/pterodactyl-documentation/docs/games/minecraft/##","content":" If you are using a firewall, additional rules might be required to allow servers to reach each other on the node. In this case the proxy server needs to reach all of the game servers behind it. Therefore we need to allow traffic from the pterodactyl network to the server ports on localhost.  You can use the following commands as an example. 172.18.0.1 is the default address referring to the node within the pterodactyl network. Replace &lt;LOCALHOST_PORT&gt; with the allocated localhost ports of the game servers.  The following commands will allow any server on the node to access the opened ports.  UFW (Ubuntu)  Allow access to the pterodactyl pterodactyl0 network on a specific port.  ufw allow in on pterodactyl0 to 172.18.0.1 port &lt;LOCALHOST_PORT&gt; proto tcp   Firewalld (CentOS)  Allow access to pterodactyl0 from the pterodactyl0 network.  This command will allow any server to access all other servers as well as all ports on the node.  firewall-cmd --permanent --zone=public --add-source=172.18.0.1  ","version":"Next","tagName":"h3"},{"title":"Panel","type":0,"sectionRef":"#","url":"/pterodactyl-documentation/docs/panel/","content":"Panel üìÑÔ∏è Getting Started Pterodactyl Panel is designed to run on your own web server. You will need to have root access to your server in order to run and use this panel. üìÑÔ∏è Webserver Configuration When using the SSL configuration you MUST create SSL certificates, otherwise your webserver will fail to start. See the Creating SSL Certificates documentation page to learn how to create these certificates before continuing. üìÑÔ∏è Additional Configuration Backups üìÑÔ∏è Updating the Panel This documentation covers the process for updating within the 1.x series of releases. This means updating from üìÑÔ∏è Troubleshooting Reading Error Logs üìÑÔ∏è Legacy Upgrades This upgrade guide is for upgrading from 0.7.X to 1.3.x. If you are trying to do an upgrade on a 1.X Panel","keywords":"","version":"Next"},{"title":"Creating a Custom Egg","type":0,"sectionRef":"#","url":"/pterodactyl-documentation/docs/eggs/egg/","content":"","keywords":"","version":"Next"},{"title":"Create New Option","type":1,"pageTitle":"Creating a Custom Egg","url":"/pterodactyl-documentation/docs/eggs/egg/##","content":" After creating the service, in the bottom right of the page you should see a button titled New Egg, press it.    You will be taken to a new service option page which is where most of the configuration happens. The first thing you need to do is select your service that you created previously from the Associated Nest dropdown.    After that, enter an Option Name to describe it, in this case I am using Widget. You will also need to provide avalid docker image, as well as a start command to be assigned to servers under this service option (remember, this can be tweaked per-server if needed).  Docker images must be specifically designed to work with Pterodactyl Panel. You should read more about that in our Creating a Docker Image guide.  ","version":"Next","tagName":"h2"},{"title":"The Pterodactyl Install Procces","type":1,"pageTitle":"Creating a Custom Egg","url":"/pterodactyl-documentation/docs/eggs/egg/##","content":" Please be aware of how the pterodactyl install process works!  1. Spin up install container Creates a new container using an install image which runs as root. Uses a volume mount on `/mnt/server` for the server files, which is the working directory during installation. The volume will be later mounted as `/home/container` for the server container. Any files outside of `/mnt/server` will be gone after installation. The installation script can set up everything that's required to run the server, such as writing files, creating directories, or compiling apps. It is regularly used to just download the files required, such as server files and configs. 2. Stop and destroy install container 3. Start a new container with the server files in /home/container This is where the server is is actually ran, without root privileges. Any dependencies installed during the install process are gone. The container that is started should have everything you need. No packages can be installed. Any required dependencies must exist in the used Docker image.   ","version":"Next","tagName":"h2"},{"title":"Configure Process Management","type":1,"pageTitle":"Creating a Custom Egg","url":"/pterodactyl-documentation/docs/eggs/egg/##","content":" This is perhaps the most important step in this service option configuration, as this tells the Daemon how to run everything.    The first field you'll encounter is Copy Settings From. The default selection is None. That is expected, and okay. This dropdown is discussed at the end of this article.  ","version":"Next","tagName":"h2"},{"title":"Stop Command","type":1,"pageTitle":"Creating a Custom Egg","url":"/pterodactyl-documentation/docs/eggs/egg/##","content":" Next, you'll encounter Stop Command and, as the name implies, this should be the command used to safely stop the option. For some games, this is stop or end. Certain programs and games don't have a specified stop command, so you can enter ^C to have the daemon execute a SIGINT to end the process.  ","version":"Next","tagName":"h3"},{"title":"Log Storage","type":1,"pageTitle":"Creating a Custom Egg","url":"/pterodactyl-documentation/docs/eggs/egg/##","content":" Logs are competely handeled by the daemon now and use the docker logs to output the complete output from the server. This can be set like below.  {}   ","version":"Next","tagName":"h3"},{"title":"Configuration Files","type":1,"pageTitle":"Creating a Custom Egg","url":"/pterodactyl-documentation/docs/eggs/egg/##","content":" The next block is one of the most complex blocks, the Configuration Files descriptor. The Daemon will process this block prior to booting the server to ensure all of the required settings are defined and set correctly.  { &quot;server.properties&quot;: { &quot;parser&quot;: &quot;properties&quot;, &quot;find&quot;: { &quot;server-ip&quot;: &quot;0.0.0.0&quot;, &quot;enable-query&quot;: &quot;true&quot;, &quot;server-port&quot;: &quot;{{server.build.default.port}}&quot;, &quot;query.port&quot;: &quot;{{server.build.default.port}}&quot; } } }   In this example, we are telling the Daemon to read server.properties in /home/container. Within this block, we define a parser, in this case properties but the following are valid parsers:  file ‚Äî This parser goes based on matching the beginning of lines, and not a specific property like the other five. Avoid using this parser if possible.yaml (supports * notation)propertiesinijson (supports * notation)xml  If you want to use egg non stock variables in the configuration parser you must reference them as {{server.build.env.ENVNAME}} or just {{env.ENVNAME}}. Do not forget to to replace ENVNAME with the actual environment name you have setup.  Once you have defined a parser, we then define a find block which tells the Daemon what specific elements to find and replace. In this example, we have provided four separate items within the server.properties file that we want to find and replace to the assigned values. You can use either an exact value, or define a specific server setting from the server.json file. In this case, we're assigning the default server port to be used as the server-port andquery.port. These placeholders are case sensitive, and should have no spaces in them.  You can have multiple files listed here, the Daemon will process them in parallel before starting the server. When using yaml or json you can use more advanced searching for elements.  { &quot;config.yml&quot;: { &quot;parser&quot;: &quot;yaml&quot;, &quot;find&quot;: { &quot;listeners[0].query_enabled&quot;: true, &quot;listeners[0].query_port&quot;: &quot;{{server.build.default.port}}&quot;, &quot;listeners[0].host&quot;: &quot;0.0.0.0:{{server.build.default.port}}&quot;, &quot;servers.*.address&quot;: { &quot;127.0.0.1&quot;: &quot;{{config.docker.interface}}&quot;, &quot;localhost&quot;: &quot;{{config.docker.interface}}&quot; } } } }   In this example, we are parsing config.yml using the yaml parser. The first three find items are simply assigning ports and IPs for the first listener block. The last one, servers.*.address uses wildcard matching to match any items within the servers block, and then finding each address block for those items.  An advanced feature of this file configuration is the ability to define multiple find and replace statements for a single matching line. In this case, we are looking for either 127.0.0.1 or localhost and replacing them with the docker interface defined in the configuration file using {{config.docker.interface}}.  File Parser  The file parser replaces the whole line that you are trying to edit. So you have to use it like this:  { &quot;main/server.cfg&quot;: { &quot;parser&quot;: &quot;file&quot;, &quot;find&quot;: { &quot;seta sv_hostname&quot;: &quot;seta sv_hostname \\&quot;{{env.SERVER_NAME}}\\&quot;&quot;, &quot;seta sv_maxClients&quot;: &quot;seta sv_maxClients \\&quot;{{env.SERVER_MAXCLIENTS}}\\&quot;&quot;, &quot;seta rconPassword&quot;: &quot;seta rconPassword \\&quot;{{env.RCON_PASSWORD}}\\&quot;&quot;, &quot;seta g_password&quot;: &quot;seta g_password \\&quot;{{env.SERVER_PASSWORD}}\\&quot;&quot;, &quot;Map&quot;: &quot;Map {{env.SERVER_MAP}}&quot; } } }   The &quot; on the right side are escaped with a \\ because else they would break the json syntax for the parser.  ","version":"Next","tagName":"h3"},{"title":"Start Configuration","type":1,"pageTitle":"Creating a Custom Egg","url":"/pterodactyl-documentation/docs/eggs/egg/##","content":" The last block to configure is the Start Configuration for servers running using this service option.  { &quot;done&quot;: &quot;)! For help, type &quot; }   In the example block above, we define done as the entire line, or part of a line that indicates a server is done starting, and is ready for players to join. When the Daemon sees this output, it will mark the server as ON rather than STARTING.  If your application has multiple messages that mean that it is fully startup then you can also do it like this:  { &quot;done&quot;:[ &quot;change this text 1&quot;, &quot;change this text 2&quot; ] }   That concludes basic service option configuration.  ","version":"Next","tagName":"h3"},{"title":"Copy Settings From","type":1,"pageTitle":"Creating a Custom Egg","url":"/pterodactyl-documentation/docs/eggs/egg/##","content":" As mentioned above, there is a unique Copy Settings From dropdown when adding a new option. This gives you the ability to, as the name suggests, copy settings defined above from a different option.    In the panel, we use this to copy settings that remain the same between similar service options, such as many of the Minecraft options.  For example, lets look at the Sponge (SpongeVanilla) service option.  As you can see, it as been told to copy settings from Vanilla Minecraft. This means that any of the fields that are left blank will inherit from the assigned parent. We then define a specific userInteraction line that is different in Sponge compared to Vanilla, but tell it that everything else should remain the same.  Please note that Copy Settings From does not support nested copies, you can only copy from a single parent, and that parent must not be copying from another option.  ","version":"Next","tagName":"h2"},{"title":"Egg Variables","type":1,"pageTitle":"Creating a Custom Egg","url":"/pterodactyl-documentation/docs/eggs/egg/##","content":" One of the great parts of the Egg Variables is the ability to define specific variables that users and/or admins can control to tweak different settings without letting users modify the startup command. To create new variables, or edit existing ones, visit the new service option you created, and click the Variables tab at the top of the page. Lets take a look at an example variable that we can create.    The name and description are rather self-explanitory, so I'll skip down to the Environment Variable box. This should be an Alpha-Numeric name with underscores, and should be uppercase. This will be the name of the environment variable which can be accessed in the startup command as {{WOOZLE_WOO}}, within file modifications as {{env.WOOZLE_WOO}}, or just ${WOOZLE_WOO} in any shell scripts (it is passed through in the environment). We also define a default value for this environment variable in this example, but it is not required to do so.  The next section is Permissions, which is a dropdown with two options: Users Can View and Users Can Edit.  Users Can View ‚Äî allows a user to view the field on the front-end, as well as the assigned value of that variable. They will be able to see it replaced in their startup command.Users Can Edit ‚Äî allows a user to edit the value of the variable, for example the name of their server.jar file if running Minecraft.  You should use caution here, even if you assign neither of the permissions it does not mean that the value will be hidden. Crafty users will still be able to get the environment on their server. In most cases this is simply hiding it from the user, and then used within the Dockerfile to perform actions, thus it is not important for the user to see.  Finally, you will need to define some input rules to validate the value against. In this example, we userequired|string|between:1,10, which means the field is required, must be a string, and must be between 1 and10 characters in length. You can find all of the available validation ruleson the Laravel website. You can also use ReGEX based validation by using the regex: rule flag. For example,required|regex:/^([\\w\\d._-]+)(\\.jar)$/ will require the field, and will match the regex as any letters or numbers (\\w\\d) including underscore (_), periods (.), and dashes (-) ending in .jar.  They will then be visible when managing the startup for a server in both the Admin CP and on the Front-End.    ","version":"Next","tagName":"h2"},{"title":"List of default variables","type":1,"pageTitle":"Creating a Custom Egg","url":"/pterodactyl-documentation/docs/eggs/egg/##","content":" The default variables are always accessible to all eggs and don't have to be created separately. They can be used in the egg startup, install script, or the configuration file parser.  Variable\tDescription\tExampleTZ\tTime Zone\tEtc/UTC STARTUP\tStartup command of the egg\tjava -Xms128M -Xmx{{SERVER_MEMORY}}M -jar {{SERVER_JARFILE}} SERVER_MEMORY\tMemory available for the server in MB\t512 SERVER_IP\tDefault ip of the server\t127.0.0.1 SERVER_PORT\tPrimary Server Port\t27015 P_SERVER_LOCATION\tLocation of the server\tExample City P_SERVER_UUID\tUUID of the server\t539fdca8-4a08-4551-a8d2-8ee5475b50d9 P_SERVER_ALLOCATION_LIMIT\tLimit of allocations allowed for the server\t0 ","version":"Next","tagName":"h2"},{"title":"Upgrading PHP","type":0,"sectionRef":"#","url":"/pterodactyl-documentation/docs/guides/php_upgrade/","content":"","keywords":"","version":"Next"},{"title":"Install PHP","type":1,"pageTitle":"Upgrading PHP","url":"/pterodactyl-documentation/docs/guides/php_upgrade/##","content":" In order to install PHP 8.1, you will need to run the following command. Please keep in mind different operating systems may have slightly different requirements for how this command is formatted.  # Add additional repository for PHP add-apt-repository -y ppa:ondrej/php apt -y update apt -y install php8.1 php8.1-{cli,gd,mysql,pdo,mbstring,tokenizer,bcmath,xml,fpm,curl,zip}   ","version":"Next","tagName":"h2"},{"title":"Update Composer","type":1,"pageTitle":"Upgrading PHP","url":"/pterodactyl-documentation/docs/guides/php_upgrade/##","content":" As of Panel@1.3.0 we require composer v2. To update composer you will need to run the following command which will perform the composer self-update process and move you over to version 2.  composer self-update --2   ","version":"Next","tagName":"h2"},{"title":"Webserver Configuration","type":1,"pageTitle":"Upgrading PHP","url":"/pterodactyl-documentation/docs/guides/php_upgrade/##","content":" NGINXApache After upgrading to PHP 8.1, you will most likely need to update your NGINX configuration. Your configuration file is most likely called pterodactyl.conf and located in the /etc/nginx/sites-available/ directory, or if on CentOS,/etc/nginx/conf.d/. Make sure to update the path in the command below to reflect the actual location of your configuration file. sed -i -e 's/php[7|8].[0-9]-fpm.sock/php8.1-fpm.sock/' /etc/nginx/sites-available/pterodactyl.conf Once you have edited the file run the command below to reload nginx and apply your changes. systemctl reload nginx   ","version":"Next","tagName":"h2"},{"title":"Return to the 1.X.X Upgrade Guide","type":1,"pageTitle":"Upgrading PHP","url":"/pterodactyl-documentation/docs/guides/php_upgrade/##","content":"","version":"Next","tagName":"h3"},{"title":"Additional Configuration","type":0,"sectionRef":"#","url":"/pterodactyl-documentation/docs/panel/configuration/","content":"","keywords":"","version":"Next"},{"title":"Backups","type":1,"pageTitle":"Additional Configuration","url":"/pterodactyl-documentation/docs/panel/configuration/##","content":" Pterodactyl Panel allows users to create backups of their servers. In order to create backups, a backup storage method has to be configured.  When changing Pterodactyl Panel's backup storage method, users may still download or delete existing backups from the prior storage driver. In the instance of migrating from S3 to local backups, S3 credentials must remain configured after switching to the local backup storage method.  ","version":"Next","tagName":"h2"},{"title":"Using Local Backups","type":1,"pageTitle":"Additional Configuration","url":"/pterodactyl-documentation/docs/panel/configuration/##","content":" By default, Pterodactyl Panel uses local storage via Wings for backups. That said, this method of backup storage can be explicitly set with the following configuration in the .env file:  # Sets your panel to use local storage via Wings for backups APP_BACKUP_DRIVER=wings   Do note that, when using local storage via Wings, the destination for backups is set in Wings' config.yml with the following setting key:  system: backup_directory: /path/to/backup/storage   ","version":"Next","tagName":"h3"},{"title":"Using S3 Backups","type":1,"pageTitle":"Additional Configuration","url":"/pterodactyl-documentation/docs/panel/configuration/##","content":" AWS S3 (or compatible storage) can be used to store remote or cloud-based backups. The following configuration options have to be set in the .env file or as environment variables in order to enable it:  # Sets your panel to use s3 for backups APP_BACKUP_DRIVER=s3 # Info to actually use s3 AWS_DEFAULT_REGION= AWS_ACCESS_KEY_ID= AWS_SECRET_ACCESS_KEY= AWS_BACKUPS_BUCKET= AWS_ENDPOINT=   For some configurations, you might have to change your S3 URL from bucket.domain.com to domain.com/bucket. To accomplish this, add AWS_USE_PATH_STYLE_ENDPOINT=true to your .env file.  Multipart Upload  The S3 backup is using the S3 multipart upload capabilities. In rare situations, you might want to adjust the size of a single part or the lifespan of the generated pre-signed URLs. The default part size is 5GB, and the default pre-signed URL lifespan is 60 minutes.  You can configure the maximal part size using the BACKUP_MAX_PART_SIZE environment variable. You must specify the size in bytes. To define the pre-signed URL lifespan, use the BACKUP_PRESIGNED_URL_LIFESPAN variable. The expected unit is minutes.  The following .env snippet configures 1GB parts and uses 120 minutes as the pre-signed URL lifespan:  BACKUP_MAX_PART_SIZE=1073741824 BACKUP_PRESIGNED_URL_LIFESPAN=120   Storage Class  Should you need to specify a storage class, use the AWS_BACKUPS_STORAGE_CLASS environment variable. Default option is STANDARD (S3 Standard).  The following .env snippet sets the class to STANDARD_IA (this is an example).  # STANDARD_IA is an example. AWS_BACKUPS_STORAGE_CLASS=STANDARD_IA   ","version":"Next","tagName":"h3"},{"title":"Reverse Proxy Setup","type":1,"pageTitle":"Additional Configuration","url":"/pterodactyl-documentation/docs/panel/configuration/##","content":" When running Pterodactyl behind a reverse proxy, such as Cloudflare's Flexible SSLor Nginx/Apache/Caddy, etc., you will need to make a quick modification to the Panel to ensure things continue to work as expected. By default, when using these reverse proxies, your Panel will not correctly handle requests. You'll most likely be unable to login or see security warnings in your browser console as it attempts to load insecure assets. This is because the internal logic the Panel uses to determine how links should be generated thinks it is running over HTTP and not over HTTPS.  You will need to edit the .env file in the Panel's root directory to contain TRUSTED_PROXIES=* at minimum. We highly suggest providing a specific IP address (or comma-separated list of IPs) rather than allowing *. For example, if your proxy is running on the same machine as the server, the chances are that something like TRUSTED_PROXIES=127.0.0.1 will work for you.  ","version":"Next","tagName":"h2"},{"title":"NGINX Specific Configuration","type":1,"pageTitle":"Additional Configuration","url":"/pterodactyl-documentation/docs/panel/configuration/##","content":" For Pterodactyl to properly respond to an NGINX reverse proxy, the NGINX location config must contain the following lines:  proxy_set_header X-Real-IP $remote_addr; proxy_set_header Host $host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_redirect off; proxy_buffering off; proxy_request_buffering off;   ","version":"Next","tagName":"h3"},{"title":"Cloudflare Specific Configuration","type":1,"pageTitle":"Additional Configuration","url":"/pterodactyl-documentation/docs/panel/configuration/##","content":" If you're using Cloudflare's Flexible SSL you should set TRUSTED_PROXIES to contain their IP addresses. Below is an example of how to set this.  TRUSTED_PROXIES=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/13,104.24.0.0/14,172.64.0.0/13,131.0.72.0/22   ","version":"Next","tagName":"h3"},{"title":"reCAPTCHA","type":1,"pageTitle":"Additional Configuration","url":"/pterodactyl-documentation/docs/panel/configuration/##","content":" The Panel uses invisible reCAPTCHA to secure the login page from brute-force attacks. If the login attempt is considered suspicious, users may be required to perform a reCAPTCHA challenge.  ","version":"Next","tagName":"h2"},{"title":"Configuring reCAPTCHA","type":1,"pageTitle":"Additional Configuration","url":"/pterodactyl-documentation/docs/panel/configuration/##","content":" While we provide a global Site Key and Secret Key by default, we highly recommend changing it for your own setup.  You can generate your own keys in the reCAPTCHA Admin Console.  The keys can then be applied using the Settings in the admin panel. The reCAPTCHA settings can be found on the Advanced tab.  ","version":"Next","tagName":"h3"},{"title":"Disabling reCAPTCHA","type":1,"pageTitle":"Additional Configuration","url":"/pterodactyl-documentation/docs/panel/configuration/##","content":" We do not recommend disabling reCAPTCHA. It is a security mechanism that makes it harder to perform brute-force attacks on user accounts.  If users have trouble logging in, or your Panel isn't exposed to the internet, it can make sense to disable reCAPTCHA.  reCAPTCHA can easily be disabled using the admin panel. In the Settings, select the Advanced tab and set the Status of reCAPTCHA to disabled.  Editing your database  If you cannot access your panel, you can modify the database directly using the following commands.  # If using MariaDB (v11.0.0+) mariadb -u root -p # If using MySQL mysql -u root -p   UPDATE panel.settings SET value = 'false' WHERE `key` = 'settings::recaptcha:enabled';   ","version":"Next","tagName":"h3"},{"title":"2FA","type":1,"pageTitle":"Additional Configuration","url":"/pterodactyl-documentation/docs/panel/configuration/##","content":" If possible you should use the panel to update your 2FA settings. If you can't access your panel for what ever reason you can use the following steps.  ","version":"Next","tagName":"h2"},{"title":"Disable 2FA requirement","type":1,"pageTitle":"Additional Configuration","url":"/pterodactyl-documentation/docs/panel/configuration/##","content":" # If using MariaDB (v11.0.0+) mariadb -u root -p # If using MySQL mysql -u root -p   UPDATE panel.settings SET value = 0 WHERE `key` = 'settings::pterodactyl:auth:2fa_required';   ","version":"Next","tagName":"h3"},{"title":"Disable 2FA for a specific user","type":1,"pageTitle":"Additional Configuration","url":"/pterodactyl-documentation/docs/panel/configuration/##","content":" Run the following command in your /var/www/pterodactyl directory.  php artisan p:user:disable2fa   ","version":"Next","tagName":"h3"},{"title":"Telemetry","type":1,"pageTitle":"Additional Configuration","url":"/pterodactyl-documentation/docs/panel/configuration/##","content":" Since 1.11, the Panel collects anonymous metrics about the Panel and all connected nodes. This feature is enabled by default, but can be disabled.  The data collected by this feature is not sold or used for advertising purposes. Aggregate statistics may be made public or shared with third-parties for the purposes of improving the software.  ","version":"Next","tagName":"h2"},{"title":"How does it work?","type":1,"pageTitle":"Additional Configuration","url":"/pterodactyl-documentation/docs/panel/configuration/##","content":" The Telemetry system works by first generating a random UUIDv4 identifier for the Panel installation. This identifier is stored in the database so people load-balancing multiple Panel instances can still have a unique identifier. This identifier is then sent to a remote server, along the associated telemetry data. The telemetry data is collected every 24 hours, there is no ongoing collection or local storage of the telemetry data, we collect the data right before we send it to the remote server.  Currently, all telemetry collection logic is handled by the TelemetryCollectionServiceon the panel. This service is responsible for collecting all the data that is sent to the remote server.  ","version":"Next","tagName":"h3"},{"title":"What data is collected?","type":1,"pageTitle":"Additional Configuration","url":"/pterodactyl-documentation/docs/panel/configuration/##","content":" If you wish to see the full data that is collected, please look at the TelemetryCollectionService (as linked above), or use the php artisan p:telemetry command to view the exact data that will be sent to the remote server.  As of 2022-12-12, the data collected consists of:  Unique identifier for the PanelVersion of the PanelPHP versionBackup storage driver (S3, Local, etc.)Cache driver (Redis, Memcached, etc.)Database driver and version (MySQL, MariaDB, PostgreSQL, etc.)Resources Allocations Total numberTotal number of used allocations (assigned to a server) Backups Total numberSum of the total amount of bytes stored by backups Eggs Total numberMap of egg UUIDs to the number of servers using that egg (removed in 1.11.2) Locations Total number Mounts Total number Nests Total numberMap of nest UUIDs to the number of servers using eggs in that nest (removed in 1.11.2) Nodes Total number Servers Total numberNumber of servers that are suspended Users Total numberNumber of users that are admins Nodes Node UUIDVersion of Wings on the nodeDocker VersionCgroups DriverVersion Containers TotalRunningPausedStopped Storage DriverFilesystem runc Version System Architecture (amd64, arm64, etc.)CPU ThreadsMemory BytesKernel VersionOperating System (Debian, Fedora, RHEL, Ubuntu, etc.)Operating System Type (bsd, linux, windows, etc.)  ","version":"Next","tagName":"h3"},{"title":"How is the data stored?","type":1,"pageTitle":"Additional Configuration","url":"/pterodactyl-documentation/docs/panel/configuration/##","content":" Currently, the data is stored with Cloudflare, we ingest all telemetry data with a Worker which does basic processing such as validation and then inserts it into Cloudflare D1. Right now, there is not an API or visualization for any of the data collected, and it can only be manually queried. Only Matthew is able to query the data at this time, but we are working on alternatives to make this data more accessible.  ","version":"Next","tagName":"h3"},{"title":"Why?","type":1,"pageTitle":"Additional Configuration","url":"/pterodactyl-documentation/docs/panel/configuration/##","content":" The primary reason for collecting this data is to help us make better decisions about the future of this software. With the release of 1.11, the minimum PHP version requirement jumped from 7.4 to 8.0, however, we wanted to add a feature that required PHP 8.1 which would've made the version requirement jump larger and potentially cause issues for some users. By collecting this data, we can hopefully have more insight to how changes like this will affect the community and make better decisions in the future. This is especially important for information like the architecture, kernel version, and operating system nodes are using. For example, we want to utilize a feature that is only present in some filesystems, but we have no idea how many people are using those filesystems, so we cannot determine if it's worth the effort to implement.  Some of the data is not as useful for making decisions, but is still useful for us to know. For example, have you ever wondered how many Panel instances there are? How many servers are being ran across all of those instances? How many users are using the Panel? How many of those users are admins? How many servers are using a specific egg? How many servers are using a specific nest? All of these questions can be answered by the data we collect, and can help us and the community better understand how the software is being used.  If you have any questions about the data we collect, please feel free to reach out to us on Discord. Our goal is to be as transparent as possible, and we want to make sure that the community understands what we are doing and why.  ","version":"Next","tagName":"h3"},{"title":"Enabling Telemetry","type":1,"pageTitle":"Additional Configuration","url":"/pterodactyl-documentation/docs/panel/configuration/##","content":" Telemetry is enabled by default, if you want to enable it after disabling it, edit your .env file and either remove the PTERODACTYL_TELEMETRY_ENABLED line, or set it to true.  PTERODACTYL_TELEMETRY_ENABLED=true   You may also use the php artisan p:environment:setup command to enable telemetry, optionally with the --telemetry flag for a non-interactive setup.  ","version":"Next","tagName":"h3"},{"title":"Disabling Telemetry","type":1,"pageTitle":"Additional Configuration","url":"/pterodactyl-documentation/docs/panel/configuration/##","content":" To disable telemetry, edit your .env file and set PTERODACTYL_TELEMETRY_ENABLED to false.  PTERODACTYL_TELEMETRY_ENABLED=false   You may also use the php artisan p:environment:setup command to disable telemetry, optionally with the --telemetry=false flag for a non-interactive setup. ","version":"Next","tagName":"h3"},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/pterodactyl-documentation/docs/panel/install/","content":"","keywords":"","version":"Next"},{"title":"Picking a Server OS","type":1,"pageTitle":"Getting Started","url":"/pterodactyl-documentation/docs/panel/install/##","content":" Pterodactyl runs on a wide range of operating systems, so pick whichever you are most comfortable using.  Pterodactyl does not support most OpenVZ systems due to incompatibilities with Docker. If you are planning on running this software on an OpenVZ based system you will ‚Äî most likely ‚Äî not be successful.  Operating System\tVersion\tSupported\tNotesUbuntu\t20.04\t‚úÖ\tDocumentation written assuming Ubuntu 20.04 as the base OS. 22.04\t‚úÖ\tMariaDB can be installed without the repo setup script. CentOS\t7\t‚úÖ\tExtra repos are required. 8\t‚úÖ\tNote that CentOS 8 is EOL. Use Rocky or Alma Linux. Debian\t11\t‚úÖ 12\t‚úÖ\t  ","version":"Next","tagName":"h2"},{"title":"Dependencies","type":1,"pageTitle":"Getting Started","url":"/pterodactyl-documentation/docs/panel/install/##","content":" PHP 8.1 (recommended) with the following extensions: cli, openssl, gd, mysql, PDO, mbstring, tokenizer, bcmath, xml or dom, curl, zip, and fpm if you are planning to use NGINX.MySQL 5.7.22 and higher (MySQL 8 recommended) or MariaDB 10.2 and higher.Redis (redis-server)A webserver (Apache, NGINX, Caddy, etc.)curltarunzipgitcomposer v2  ","version":"Next","tagName":"h2"},{"title":"Example Dependency Installation","type":1,"pageTitle":"Getting Started","url":"/pterodactyl-documentation/docs/panel/install/##","content":" The commands below are simply an example of how you might install these dependencies. Please consult with your operating system's package manager to determine the correct packages to install.  # Add &quot;add-apt-repository&quot; command apt -y install software-properties-common curl apt-transport-https ca-certificates gnupg # Add additional repositories for PHP, Redis, and MariaDB LC_ALL=C.UTF-8 add-apt-repository -y ppa:ondrej/php # Add Redis official APT repository curl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg echo &quot;deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main&quot; | sudo tee /etc/apt/sources.list.d/redis.list # MariaDB repo setup script can be skipped on Ubuntu 22.04 curl -sS https://downloads.mariadb.com/MariaDB/mariadb_repo_setup | sudo bash # Update repositories list apt update # Install Dependencies apt -y install php8.1 php8.1-{common,cli,gd,mysql,mbstring,bcmath,xml,fpm,curl,zip} mariadb-server nginx tar unzip git redis-server   ","version":"Next","tagName":"h3"},{"title":"Installing Composer","type":1,"pageTitle":"Getting Started","url":"/pterodactyl-documentation/docs/panel/install/##","content":" Composer is a dependency manager for PHP that allows us to ship everything you'll need code wise to operate the Panel. You'll need composer installed before continuing in this process.  curl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin --filename=composer   ","version":"Next","tagName":"h3"},{"title":"Download Files","type":1,"pageTitle":"Getting Started","url":"/pterodactyl-documentation/docs/panel/install/##","content":" The first step in this process is to create the folder where the panel will live and then move ourselves into that newly created folder. Below is an example of how to perform this operation.  mkdir -p /var/www/pterodactyl cd /var/www/pterodactyl   Once you have created a new directory for the Panel and moved into it you'll need to download the Panel files. This is as simple as using curl to download our pre-packaged content. Once it is downloaded you'll need to unpack the archive and then set the correct permissions on the storage/ and bootstrap/cache/ directories. These directories allow us to store files as well as keep a speedy cache available to reduce load times.  curl -Lo panel.tar.gz https://github.com/pterodactyl/panel/releases/latest/download/panel.tar.gz tar -xzvf panel.tar.gz chmod -R 755 storage/* bootstrap/cache/   ","version":"Next","tagName":"h2"},{"title":"Installation","type":1,"pageTitle":"Getting Started","url":"/pterodactyl-documentation/docs/panel/install/##","content":" Now that all of the files have been downloaded we need to configure some core aspects of the Panel.  You will need a database setup and a user with the correct permissions created for that database before continuing any further. See below to create a user and database for your Pterodactyl panel quickly. To find more detailed information please have a look at Setting up MySQL. # If using MariaDB (v11.0.0+) mariadb -u root -p # If using MySQL mysql -u root -p # Remember to change 'yourPassword' below to be a unique password CREATE USER 'pterodactyl'@'127.0.0.1' IDENTIFIED BY 'yourPassword'; CREATE DATABASE panel; GRANT ALL PRIVILEGES ON panel.* TO 'pterodactyl'@'127.0.0.1' WITH GRANT OPTION; exit   First we will copy over our default environment settings file, install core dependencies, and then generate a new application encryption key.  cp .env.example .env composer install --no-dev --optimize-autoloader # Only run the command below if you are installing this Panel for # the first time and do not have any Pterodactyl Panel data in the database. php artisan key:generate --force   Back up your encryption key (APP_KEY in the .env file). It is used as an encryption key for all data that needs to be stored securely (e.g. api keys). Store it somewhere safe - not just on your server. If you lose it all encrypted data is irrecoverable -- even if you have database backups.  ","version":"Next","tagName":"h2"},{"title":"Environment Configuration","type":1,"pageTitle":"Getting Started","url":"/pterodactyl-documentation/docs/panel/install/##","content":" Pterodactyl's core environment is easily configured using a few different CLI commands built into the app. This step will cover setting up things such as sessions, caching, database credentials, and email sending.  php artisan p:environment:setup php artisan p:environment:database # To use a custom SMTP server, select &quot;smtp&quot;. # If you don't want to setup the panel mail skip this command. # You can always set it up later if you changed your mind. php artisan p:environment:mail   ","version":"Next","tagName":"h3"},{"title":"Database Setup","type":1,"pageTitle":"Getting Started","url":"/pterodactyl-documentation/docs/panel/install/##","content":" Now we need to setup all of the base data for the Panel in the database you created earlier. The command below may take some time to run depending on your machine. Please DO NOT exit the process until it is completed! This command will setup the database tables and then add all of the Nests &amp; Eggs that power Pterodactyl.  php artisan migrate --seed --force   ","version":"Next","tagName":"h3"},{"title":"Add The First User","type":1,"pageTitle":"Getting Started","url":"/pterodactyl-documentation/docs/panel/install/##","content":" You'll then need to create an administrative user so that you can log into the panel. To do so, run the command below. At this time passwords must meet the following requirements: 8 characters, mixed case, at least one number.  php artisan p:user:make   ","version":"Next","tagName":"h3"},{"title":"Set Permissions","type":1,"pageTitle":"Getting Started","url":"/pterodactyl-documentation/docs/panel/install/##","content":" The last step in the installation process is to set the correct permissions on the Panel files so that the webserver can use them correctly.  # If using NGINX or Apache (not on CentOS): chown -R www-data:www-data /var/www/pterodactyl/* # If using NGINX on CentOS: chown -R nginx:nginx /var/www/pterodactyl/* # If using Apache on CentOS: chown -R apache:apache /var/www/pterodactyl/*   ","version":"Next","tagName":"h3"},{"title":"Queue Listeners","type":1,"pageTitle":"Getting Started","url":"/pterodactyl-documentation/docs/panel/install/##","content":" We make use of queues to make the application faster and handle sending emails and other actions in the background. You will need to setup the queue worker for these actions to be processed.  ","version":"Next","tagName":"h2"},{"title":"Crontab Configuration","type":1,"pageTitle":"Getting Started","url":"/pterodactyl-documentation/docs/panel/install/##","content":" The first thing we need to do is create a new cronjob that runs every minute to process specific Pterodactyl tasks, such as session cleanup and sending scheduled tasks to daemons. You'll want to open your crontab using sudo crontab -e and then paste the line below.  * * * * * php /var/www/pterodactyl/artisan schedule:run &gt;&gt; /dev/null 2&gt;&amp;1   ","version":"Next","tagName":"h3"},{"title":"Create Queue Worker","type":1,"pageTitle":"Getting Started","url":"/pterodactyl-documentation/docs/panel/install/##","content":" Next you need to create a new systemd worker to keep our queue process running in the background. This queue is responsible for sending emails and handling many other background tasks for Pterodactyl.  Create a file called pteroq.service in /etc/systemd/system with the contents below.  # Pterodactyl Queue Worker File # ---------------------------------- [Unit] Description=Pterodactyl Queue Worker After=redis-server.service [Service] # On some systems the user and group might be different. # Some systems use `apache` or `nginx` as the user and group. User=www-data Group=www-data Restart=always ExecStart=/usr/bin/php /var/www/pterodactyl/artisan queue:work --queue=high,standard,low --sleep=3 --tries=3 StartLimitInterval=180 StartLimitBurst=30 RestartSec=5s [Install] WantedBy=multi-user.target   If you are using CentOS, you will need to replace redis-server.service with redis.service at the After= line in order to ensure redis starts before the queue worker.  If you are not using redis for anything you should remove the After= line, otherwise you will encounter errors when the service starts.  If you are using redis for your system, you will want to make sure to enable that it will start on boot. You can do that by running the following command:  sudo systemctl enable --now redis-server   Finally, enable the service and set it to boot on machine start.  sudo systemctl enable --now pteroq.service   ","version":"Next","tagName":"h3"},{"title":"Telemetry","type":1,"pageTitle":"Getting Started","url":"/pterodactyl-documentation/docs/panel/install/##","content":" Since 1.11, Pterodactyl will collect anonymous telemetry to help us better understand how the software is being used. To learn more about this feature and to opt-out, please see our Telemetrydocumentation. Make sure to continue with the rest of the installation process.  Next Step: Webserver Configuration ","version":"Next","tagName":"h3"},{"title":"Troubleshooting","type":0,"sectionRef":"#","url":"/pterodactyl-documentation/docs/panel/troubleshooting/","content":"","keywords":"","version":"Next"},{"title":"Reading Error Logs","type":1,"pageTitle":"Troubleshooting","url":"/pterodactyl-documentation/docs/panel/troubleshooting/##","content":" If you ever encounter an unexpected error with the Panel the first thing you will likely be asked for is the logs. To retrieve these, simply execute the command below which will output the last 100 lines of the Panel's log file.  tail -n 100 /var/www/pterodactyl/storage/logs/laravel-$(date +%F).log   ","version":"Next","tagName":"h2"},{"title":"Parsing the Error","type":1,"pageTitle":"Troubleshooting","url":"/pterodactyl-documentation/docs/panel/troubleshooting/##","content":" When you run the command above, you'll probably be hit with a huge wall of text that might scare you. Fear not, this is simply a stacktrace leading to the cause of the error, and you can actually ignore almost all of it when looking for the cause of the error. Lets take a look at some example output below, which has been truncated to make this easier to follow with.  #70 /srv/www/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php(116): Illuminate\\Foundation\\Http\\Kernel-&gt;sendRequestThroughRouter(Object(Illuminate\\Http\\Request)) #71 /srv/www/public/index.php(53): Illuminate\\Foundation\\Http\\Kernel-&gt;handle(Object(Illuminate\\Http\\Request)) #72 {main} [2018-07-19 00:50:24] local.ERROR: ErrorException: file_put_contents(/srv/www/storage/framework/views/c9c05d1357df1ce4ec8fc5df78c16c493b0d4f48.php): failed to open stream: Permission denied in /srv/www/vendor/laravel/framework/src/Illuminate/Filesystem/Filesystem.php:122 Stack trace: #0 [internal function]: Illuminate\\Foundation\\Bootstrap\\HandleExceptions-&gt;handleError(2, 'file_put_conten...', '/srv/www/vendor...', 122, Array) #1 /srv/www/vendor/laravel/framework/src/Illuminate/Filesystem/Filesystem.php(122): file_put_contents('/srv/www/storag...', '&lt;?php $__env-&gt;s...', 0) #2 /srv/www/vendor/laravel/framework/src/Illuminate/View/Compilers/BladeCompiler.php(122): Illuminate\\Filesystem\\Filesystem-&gt;put('/srv/www/storag...', '&lt;?php $__env-&gt;s...') #3 /srv/www/vendor/laravel/framework/src/Illuminate/View/Engines/CompilerEngine.php(51): Illuminate\\View\\Compilers\\BladeCompiler-&gt;compile('/srv/www/resour...') #4 /srv/www/vendor/laravel/framework/src/Illuminate/View/View.php(142): Illuminate\\View\\Engines\\CompilerEngine-&gt;get('/srv/www/resour...', Array) #5 /srv/www/vendor/laravel/framework/src/Illuminate/View/View.php(125): Illuminate\\View\\View-&gt;getContents()   The first thing you'll want to do is follow the chain of numbers up until you find #0, this will be the function that triggered the exception. Right above line 0 you will see a line that has the date and time in brackets, [2018-07-19 00:50:24]above for example. This line will be the human readable exception that you can use to understand what went wrong.  ","version":"Next","tagName":"h3"},{"title":"Understanding the Error","type":1,"pageTitle":"Troubleshooting","url":"/pterodactyl-documentation/docs/panel/troubleshooting/##","content":" In the example above we can see that the actual error was:  local.ERROR: ErrorException: file_put_contents(...): failed to open stream: Permission denied in /srv/www/vendor/laravel/framework/src/Illuminate/Filesystem/Filesystem.php:122   From this error we can determine that there was an error performing a file_put_contents() call, and the error was that we couldn't open the file because permissions were denied. Its okay if you don't understand the error at all, but it does help you get faster support if you're able to provide these logs, and at least find the source of the error. Sometimes the errors are pretty straightforward and will tell you exactly what went wrong, such as a ConnectionExceptionbeing thrown when the Panel can't connect to the Daemon.  ","version":"Next","tagName":"h3"},{"title":"Utilizing GREP","type":1,"pageTitle":"Troubleshooting","url":"/pterodactyl-documentation/docs/panel/troubleshooting/##","content":" If you're trying to go through a bunch of errors quickly, you can use the command below which will limit the results returned to only be the actual error lines, without all of the stack traces.  tail -n 1000 /var/www/pterodactyl/storage/logs/laravel-$(date +%F).log | grep &quot;\\[$(date +%Y)&quot;   ","version":"Next","tagName":"h3"},{"title":"Cannot Connect to Server Errors","type":1,"pageTitle":"Troubleshooting","url":"/pterodactyl-documentation/docs/panel/troubleshooting/##","content":" ","version":"Next","tagName":"h2"},{"title":"Basic Debugging Steps","type":1,"pageTitle":"Troubleshooting","url":"/pterodactyl-documentation/docs/panel/troubleshooting/##","content":" Check that Wings is running, and not reporting errors. Use systemctl status wings to check the current status of the process.Check your browser's console by pressing Ctrl + Shift + J (in Chrome) or Cmd + Alt + I (in Safari). If there is a red error in it, chances are that it will narrow down the potential problem.Make sure Wings is properly installed and the active configuration matches the configuration shown underAdmin -&gt; Node -&gt; Configuration in the Panel.Check that the Wings ports are open on your firewall. Wings uses ports 8080 or 8443 for HTTP(s) traffic, and 2022 for SFTP traffic.Ensure you have AdBlock disabled or whitelisted for your Panel and Wings domains.Check that the Panel can reach Wings using the domain that is configured on the Panel. Run curl https://domain.com:8080 on the Panel server and ensure that it can successfully connect to Wings.Ensure that you are using the correct HTTP scheme for your Panel and Wings. If the Panel is running over HTTPS Wings will also need to be running on HTTPS.  ","version":"Next","tagName":"h3"},{"title":"More Advanced Debugging Steps","type":1,"pageTitle":"Troubleshooting","url":"/pterodactyl-documentation/docs/panel/troubleshooting/##","content":" Stop Wings and run wings --debug to see if there are any errors being output. If so, try resolving them manually, or reach out on Discord for more assistance.Check your DNS and ensure that the response you receive is the one you expect using a tool such as nslookup or dig.If you use CloudFlare make sure that the orange cloud is disabled for your Wings or Panel A records.Make sure when using Wings behind a firewall ‚Äî pfSense, OpenSwitch, etc. ‚Äî that the correct NAT settings to access the Wing's ports from the outside network are setup.If nothing is working so far, check your own DNS settings and consider switching DNS servers.When running the Panel and Wings on one server it can sometimes help if to add an entry in /etc/hosts that directs the public IP back to the server. Sometimes the reverse path is also needed, so you may need to add an entry to your servers /etc/hosts file that points the Panel's domain to the correct IP.When running Wings and the Panel on separate VM's using the same adapter make sure the VM's can connect to each other. Promiscuous mode might be needed.  ","version":"Next","tagName":"h3"},{"title":"Invalid MAC Exception","type":1,"pageTitle":"Troubleshooting","url":"/pterodactyl-documentation/docs/panel/troubleshooting/##","content":" This error should never happen if you correctly follow our installation and upgrade guides. The only time we have ever seen this error occur is when you blindly restore the Panel database from a backup and try to use a fresh installation of the Panel. When restoring backups you should always restore the .env file!  Sometimes when using the Panel you'll unexpectedly encounter a broken page, and upon checking the logs you'll see an exception mentioning an invalid MAC when decrypting. This error is caused by mismatched APP_KEYs in your .env file when the data was encrypted versus decrypted.  If you are seeing this error the only solution is to restore the APP_KEY from your .env file. If you have lost that original key there is no way to recover the lost data.  ","version":"Next","tagName":"h2"},{"title":"SELinux Issues","type":1,"pageTitle":"Troubleshooting","url":"/pterodactyl-documentation/docs/panel/troubleshooting/##","content":" On systems with SELinux installed you might encounter unexpected errors when running redis or attempting to connect to the daemon to perform actions. These issues can generally be resolved by executing the commands below to allow these programs to work with SELinux.  ","version":"Next","tagName":"h2"},{"title":"Redis Permissions Errors","type":1,"pageTitle":"Troubleshooting","url":"/pterodactyl-documentation/docs/panel/troubleshooting/##","content":" audit2allow -a -M redis_t semodule -i redis_t.pp   ","version":"Next","tagName":"h3"},{"title":"Wings Connection Errors","type":1,"pageTitle":"Troubleshooting","url":"/pterodactyl-documentation/docs/panel/troubleshooting/##","content":" audit2allow -a -M http_port_t semodule -i http_port_t.pp   ","version":"Next","tagName":"h3"},{"title":"Containers don't have internet? Probably a DNS issue!","type":1,"pageTitle":"Troubleshooting","url":"/pterodactyl-documentation/docs/panel/troubleshooting/##","content":" Now that Wings has run successfully and you have gotten the green heart on your Nodes page, the wings config at '/etc/pterodactyl/config.yml' will have new values. One of those values is DNS, which by default will be 1.1.1.1 and 1.0.0.1 If you are using a host that blocks Cloudflare DNS, you will have to use different DNS Servers; typically the same ones your host system is using. You can view what DNS Servers your host uses through a number of ways depending on how your operating system handles networking. If one of these doesn't work, try another one.  # Systemd-Resolve (Ubuntu 20.04) systemd-resolve --status # Resolve-CTL (Newer Version of Ubuntu) resolvectl status # Network Manager nmcli dev show # Raw file locations that may have your host system's DNS Servers for various distributions /etc/resolv.conf /etc/network/interfaces   If this returns different DNS Servers than 1.1.1.1 and 1.0.0.1 you'll need to edit the wings 'config.yml' file to use the DNS servers that were returned from the command. If you see output that looks like an IPV6 address in addition to your IPV4 DNS Servers, make sure you put that in the IPV6 section and not the IPV4 section. To be clear, if you have to use different DNS Servers than the default, make sure to REMOVE 1.1.1.1 and 1.0.0.1 from the wings config; don't just add the new servers, replace the old servers.  ","version":"Next","tagName":"h3"},{"title":"FirewallD issues","type":1,"pageTitle":"Troubleshooting","url":"/pterodactyl-documentation/docs/panel/troubleshooting/##","content":" If you are on a RHEL/CentOS server with firewalld installed you may have broken DNS.  firewall-cmd --permanent --zone=trusted --change-interface=pterodactyl0 firewall-cmd --reload   Restart docker and wings after running these to be sure the rules are applied. ","version":"Next","tagName":"h2"},{"title":"Project Information","type":0,"sectionRef":"#","url":"/pterodactyl-documentation/docs/project/","content":"Project Information üìÑÔ∏è Introduction Pterodactyl Introduction üìÑÔ∏è About About Us And The Community üìÑÔ∏è Terminology Terminology Documentation üìÑÔ∏è Community Standards Community Standards And Guidelines","keywords":"","version":"Next"},{"title":"Legacy Upgrades","type":0,"sectionRef":"#","url":"/pterodactyl-documentation/docs/panel/legacy_upgrade/","content":"","keywords":"","version":"Next"},{"title":"Enter Maintenance Mode","type":1,"pageTitle":"Legacy Upgrades","url":"/pterodactyl-documentation/docs/panel/legacy_upgrade/##","content":" You'll want to put your Panel into maintenance mode by running the down command below before starting. This will prevent users from accessing the Panel during a period where things will be broken or not working correctly. Make sure that you're in the /var/www/pterodactyl directory when executing the command.  # Put the Panel into maintenance mode and deny user access php artisan down   ","version":"Next","tagName":"h2"},{"title":"Update Dependencies","type":1,"pageTitle":"Legacy Upgrades","url":"/pterodactyl-documentation/docs/panel/legacy_upgrade/##","content":" You'll need to make sure your system dependencies are up to date before performing this upgrade. Please reference the list below to ensure you have all of the required versions.  PHP 8.1 (recommended) with the following extensions: cli, openssl, gd, mysql, PDO, mbstring,tokenizer, bcmath, xml or dom, curl, zip, and fpm if you are planning to use nginx. See our guide for Upgrading PHP for details.Composer v2 (composer self-update --2)  If you upgrade your PHP version and are using nginx as your webserver, you will have to update thefastcgi_pass value in your nginx's pterodactyl.conf configuration to use the correct php-fpm socket.  MySQL 5.7.22 or higher (MySQL 8 recommended) or MariaDB 10.2 or higher.  Please make sure you are running the correct version of MariaDB or MySQL listed above! Failure to do so willresult in an error when you attempt to run the migrations. Previous documentation (and just the age of this software) likely had you installing MariaDB 10.1 which will not work with this version of Pterodactyl.  ","version":"Next","tagName":"h2"},{"title":"Fetch Updated Files","type":1,"pageTitle":"Legacy Upgrades","url":"/pterodactyl-documentation/docs/panel/legacy_upgrade/##","content":" The first step in the update process is to download the new panel files from GitHub. The command below will download the release archive for the most recent version of Pterodactyl and save it in the current directory. Now is a good time to ensure that you're in the /var/www/pterodactyl directory as the command below will automatically unpack the archive into your current folder.  We will also be deleting the app/ directory. Because of the way we handle installations and upgrades deleted files are not always detected properly, so simply uppacking over this location will result in some confusing behavior.  # Delete the app directory to ensure we start with a clean slate here. This will not affect any # of your settings or servers. curl -L -o panel.tar.gz https://github.com/pterodactyl/panel/releases/latest/download/panel.tar.gz rm -rf $(find app public resources -depth | head -n -1 | grep -Fv &quot;$(tar -tf panel.tar.gz)&quot;) # Download the updated files and delete the archive file. tar -xzvf panel.tar.gz &amp;&amp; rm -f panel.tar.gz   Once all of the files are downloaded we need to set the correct permissions on the cache and storage directories to avoid any webserver related errors.  chmod -R 755 storage/* bootstrap/cache   ","version":"Next","tagName":"h2"},{"title":"Update Dependencies","type":1,"pageTitle":"Legacy Upgrades","url":"/pterodactyl-documentation/docs/panel/legacy_upgrade/##","content":" After you've downloaded all of the new files you will need to upgrade the core components of the panel. To do this, simply run the commands below and follow any prompts.  composer install --no-dev --optimize-autoloader   ","version":"Next","tagName":"h2"},{"title":"Clear Compiled Template Cache","type":1,"pageTitle":"Legacy Upgrades","url":"/pterodactyl-documentation/docs/panel/legacy_upgrade/##","content":" You'll also want to clear the compiled template cache to ensure that new and modified templates show up correctly for users.  php artisan view:clear php artisan config:clear   ","version":"Next","tagName":"h2"},{"title":"Database Updates","type":1,"pageTitle":"Legacy Upgrades","url":"/pterodactyl-documentation/docs/panel/legacy_upgrade/##","content":" You'll also need to update your database schema for the newest version of Pterodactyl. Running the two commands below will update the schema and ensure the default eggs we ship are up to date (and add any new ones we might have). Just remember, never edit core eggs we ship! They will be overwritten by this update process.  If you used a custom plugin that allowed for server transfers on 0.7 you MUST delete or rename the server_transfers table before continuing.  php artisan migrate --force php artisan db:seed --force   ","version":"Next","tagName":"h2"},{"title":"Set Permissions","type":1,"pageTitle":"Legacy Upgrades","url":"/pterodactyl-documentation/docs/panel/legacy_upgrade/##","content":" The last step is to set the proper owner of the files to be the user that runs your webserver. In most cases this is www-data but can vary from system to system ‚Äî sometimes being nginx, apache, or even nobody.  # If using NGINX or Apache (not on CentOS): chown -R www-data:www-data * # If using NGINX on CentOS: chown -R nginx:nginx * # If using Apache on CentOS chown -R apache:apache *   ","version":"Next","tagName":"h2"},{"title":"Restarting Queue Workers","type":1,"pageTitle":"Legacy Upgrades","url":"/pterodactyl-documentation/docs/panel/legacy_upgrade/##","content":" After every update you should restart the queue worker to ensure that the new code is loaded in and used.  php artisan queue:restart   ","version":"Next","tagName":"h2"},{"title":"Exit Maintenance Mode","type":1,"pageTitle":"Legacy Upgrades","url":"/pterodactyl-documentation/docs/panel/legacy_upgrade/##","content":" Now that the upgrade is complete, exit maintenance mode and your Panel will now be available.  # Bring the Panel back up to receive connections. php artisan up   ","version":"Next","tagName":"h2"},{"title":"Switch to Wings","type":1,"pageTitle":"Legacy Upgrades","url":"/pterodactyl-documentation/docs/panel/legacy_upgrade/##","content":" We've deprecated the old Node.js daemon in favor of Wings, our new server control plane written in Go. This new system is significantly faster, easier to install, and much smaller. All you need to do is install a single binary on your system and configure it to run on boot. You cannot use the old Node.js Daemon to run servers with Pterodactyl Panel 1.0.  Please see Migrating to Wings for instructions. ","version":"Next","tagName":"h2"},{"title":"Updating the Panel","type":0,"sectionRef":"#","url":"/pterodactyl-documentation/docs/panel/updating/","content":"","keywords":"","version":"Next"},{"title":"Panel Version Requirements","type":1,"pageTitle":"Updating the Panel","url":"/pterodactyl-documentation/docs/panel/updating/##","content":" Each version of Pterodactyl Panel also has a corresponding minimum version of Wings that is required for it to run. Please see the chart below for how these versions line up. In most cases your base Wings version should match that of your Panel.  Panel Version\tWings Version\tSupported\tPHP Versions1.0.x\t1.0.x 7.3, 7.4 1.1.x\t1.1.x 7.3, 7.4 1.2.x\t1.2.x 7.3, 7.4 1.3.x\t1.3.x 7.4, 8.0 1.4.x\t1.4.x 7.4, 8.0 1.5.x\t1.4.x 7.4, 8.0 1.6.x\t1.4.x 7.4, 8.0 1.7.x\t1.5.x 7.4, 8.0 1.8.x\t1.6.x 7.4, 8.0, 8.1 1.9.x\t1.6.x 7.4, 8.0, 8.1 1.10.x\t1.7.x 7.4, 8.0, 8.1 1.11.x\t1.11.x\t‚úÖ\t8.1  NOTE: There are no 1.8.x, 1.9.x, or 1.10.x releases of Wings.  ","version":"Next","tagName":"h2"},{"title":"Update Dependencies","type":1,"pageTitle":"Updating the Panel","url":"/pterodactyl-documentation/docs/panel/updating/##","content":" PHP 8.1Composer 2.X  Support for PHP 7.4 &amp; 8.0 has been removed with the release of 1.11.4. Please upgrade to PHP 8.1  Support for PHP 8.0 is deprecated. Please plan accordingly ‚Äî PHP 8.1 or newer will be the only supported version in 1.11.4 and beyond.  Before continuing, please ensure that your system and web server configuration has been upgraded to at least PHP 8.1 by running php -v and Composer 2 by running composer --version. You should see an output similar to the result below. If you do not see at least PHP 8.1 and Composer 2, you will need to upgrade by following our PHP Upgrade Guide and return to this documentation afterward.  vagrant@pterodactyl:~/app$ php -v PHP 8.1.5 (cli) (built: Apr 21 2022 10:32:13) (NTS) Copyright (c) The PHP Group Zend Engine v4.1.5, Copyright (c) Zend Technologies with Zend OPcache v8.1.5, Copyright (c), by Zend Technologies vagrant@pterodactyl:~/app$ composer --version Composer version 2.3.5 2022-04-13 16:43:00   ","version":"Next","tagName":"h2"},{"title":"Self Upgrade","type":1,"pageTitle":"Updating the Panel","url":"/pterodactyl-documentation/docs/panel/updating/##","content":" The self-upgrade is currently in-operable due to issues with some dependencies we make use of. For the time being please perform a manual upgrade until this issue can be resolved.  ","version":"Next","tagName":"h2"},{"title":"Manual Upgrade","type":1,"pageTitle":"Updating the Panel","url":"/pterodactyl-documentation/docs/panel/updating/##","content":" If you prefer not to perform the automatic self-upgrade, or need to reference any upgrade steps you can follow the documentation below.  If you've already performed the self-upgrade successfully you do not need to do anything else on this page.  ","version":"Next","tagName":"h2"},{"title":"Enter Maintenance Mode","type":1,"pageTitle":"Updating the Panel","url":"/pterodactyl-documentation/docs/panel/updating/##","content":" Whenever you are performing an update you should be sure to place your Panel into maintenance mode. This will prevent users from encountering unexpected errors and ensure everything can be updated before users encounter potentially new features.  cd /var/www/pterodactyl php artisan down   ","version":"Next","tagName":"h3"},{"title":"Download the Update","type":1,"pageTitle":"Updating the Panel","url":"/pterodactyl-documentation/docs/panel/updating/##","content":" The first step in the update process is to download the new panel files from GitHub. The command below will download the release archive for the most recent version of Pterodactyl, save it in the current directory and will automatically unpack the archive into your current folder.  curl -L https://github.com/pterodactyl/panel/releases/latest/download/panel.tar.gz | tar -xzv   Once all of the files are downloaded we need to set the correct permissions on the cache and storage directories to avoid any webserver related errors.  chmod -R 755 storage/* bootstrap/cache   ","version":"Next","tagName":"h3"},{"title":"Update Dependencies","type":1,"pageTitle":"Updating the Panel","url":"/pterodactyl-documentation/docs/panel/updating/##","content":" After you've downloaded all of the new files you will need to upgrade the core components of the panel. To do this, simply run the commands below and follow any prompts.  composer install --no-dev --optimize-autoloader   ","version":"Next","tagName":"h3"},{"title":"Clear Compiled Template Cache","type":1,"pageTitle":"Updating the Panel","url":"/pterodactyl-documentation/docs/panel/updating/##","content":" You'll also want to clear the compiled template cache to ensure that new and modified templates show up correctly for users.  php artisan view:clear php artisan config:clear   ","version":"Next","tagName":"h3"},{"title":"Database Updates","type":1,"pageTitle":"Updating the Panel","url":"/pterodactyl-documentation/docs/panel/updating/##","content":" You'll also need to update your database schema for the newest version of Pterodactyl. Running the command below will update the schema and ensure the default eggs we ship are up to date (and add any new ones we might have). Just remember, never edit core eggs we ship! They will be overwritten by this update process.  php artisan migrate --seed --force   ","version":"Next","tagName":"h3"},{"title":"Set Permissions","type":1,"pageTitle":"Updating the Panel","url":"/pterodactyl-documentation/docs/panel/updating/##","content":" The last step is to set the proper owner of the files to be the user that runs your webserver. In most cases this is www-data but can vary from system to system ‚Äî sometimes being nginx, caddy, apache, or even nobody.  # If using NGINX or Apache (not on CentOS): chown -R www-data:www-data /var/www/pterodactyl/* # If using NGINX on CentOS: chown -R nginx:nginx /var/www/pterodactyl/* # If using Apache on CentOS chown -R apache:apache /var/www/pterodactyl/*   ","version":"Next","tagName":"h3"},{"title":"Restarting Queue Workers","type":1,"pageTitle":"Updating the Panel","url":"/pterodactyl-documentation/docs/panel/updating/##","content":" After every update you should restart the queue worker to ensure that the new code is loaded in and used.  php artisan queue:restart   ","version":"Next","tagName":"h3"},{"title":"Exit Maintenance Mode","type":1,"pageTitle":"Updating the Panel","url":"/pterodactyl-documentation/docs/panel/updating/##","content":" Now that everything has been updated you need to exit maintenance mode so that the Panel can resume accepting connections.  php artisan up   ","version":"Next","tagName":"h3"},{"title":"Telemetry","type":1,"pageTitle":"Updating the Panel","url":"/pterodactyl-documentation/docs/panel/updating/##","content":" Since 1.11, Pterodactyl will collect anonymous telemetry to help us better understand how the software is being used. To learn more about this feature and to opt-out, please see our Telemetrydocumentation. Remember to continue with the rest of the upgrade.  Final Step: Upgrade Wings ","version":"Next","tagName":"h3"},{"title":"Webserver Configuration","type":0,"sectionRef":"#","url":"/pterodactyl-documentation/docs/panel/webserver/","content":"Webserver Configuration When using the SSL configuration you MUST create SSL certificates, otherwise your webserver will fail to start. See the Creating SSL Certificates documentation page to learn how to create these certificates before continuing. Nginx With SSLNginx Without SSLApache With SSLApache Without SSL First, remove the default NGINX configuration. rm /etc/nginx/sites-enabled/default Now, you should paste the contents of the file below, replacing &lt;domain&gt; with your domain name being used in a file called pterodactyl.conf and place the file in /etc/nginx/sites-available/, or ‚Äî if on CentOS, /etc/nginx/conf.d/. server_tokens off; server { listen 80; server_name &lt;domain&gt;; return 301 https://$server_name$request_uri; } server { listen 443 ssl http2; server_name &lt;domain&gt;; root /var/www/pterodactyl/public; index index.php; access_log /var/log/nginx/pterodactyl.app-access.log; error_log /var/log/nginx/pterodactyl.app-error.log error; # allow larger file uploads and longer script runtimes client_max_body_size 100m; client_body_timeout 120s; sendfile off; # SSL Configuration - Replace the example &lt;domain&gt; with your domain ssl_certificate /etc/letsencrypt/live/&lt;domain&gt;/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/&lt;domain&gt;/privkey.pem; ssl_session_cache shared:SSL:10m; ssl_protocols TLSv1.2 TLSv1.3; ssl_ciphers &quot;ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384&quot;; ssl_prefer_server_ciphers on; # See https://hstspreload.org/ before uncommenting the line below. # add_header Strict-Transport-Security &quot;max-age=15768000; preload;&quot;; add_header X-Content-Type-Options nosniff; add_header X-XSS-Protection &quot;1; mode=block&quot;; add_header X-Robots-Tag none; add_header Content-Security-Policy &quot;frame-ancestors 'self'&quot;; add_header X-Frame-Options DENY; add_header Referrer-Policy same-origin; location / { try_files $uri $uri/ /index.php?$query_string; } location ~ \\.php$ { fastcgi_split_path_info ^(.+\\.php)(/.+)$; fastcgi_pass unix:/run/php/php8.1-fpm.sock; fastcgi_index index.php; include fastcgi_params; fastcgi_param PHP_VALUE &quot;upload_max_filesize = 100M \\n post_max_size=100M&quot;; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; fastcgi_param HTTP_PROXY &quot;&quot;; fastcgi_intercept_errors off; fastcgi_buffer_size 16k; fastcgi_buffers 4 16k; fastcgi_connect_timeout 300; fastcgi_send_timeout 300; fastcgi_read_timeout 300; include /etc/nginx/fastcgi_params; } location ~ /\\.ht { deny all; } } Enabling Configuration The final step is to enable your NGINX configuration and restart it. # You do not need to symlink this file if you are using CentOS. sudo ln -s /etc/nginx/sites-available/pterodactyl.conf /etc/nginx/sites-enabled/pterodactyl.conf # You need to restart nginx regardless of OS. sudo systemctl restart nginx Next Step: Wings Installation","keywords":"","version":"Next"},{"title":"About","type":0,"sectionRef":"#","url":"/pterodactyl-documentation/docs/project/about/","content":"","keywords":"","version":"Next"},{"title":"Core Project Team","type":1,"pageTitle":"About","url":"/pterodactyl-documentation/docs/project/about/##","content":" Name\tDiscord Name\tPrimary RoleDane Everitt\t.tacticalfish\tFounder &amp; Former Project Maintainer Matthew Penner\tmatthewp\tProject Maintainer Stepan Fedotov\ttrixter\tWHMCS Module Maintainer Michael Parker\tparkervcp\tEgg Developer, Docker Integration Lance Pioch\tshadowlancer\tDeveloper  Members of the project team have a red username in our Discord server.  ","version":"Next","tagName":"h2"},{"title":"Community Team","type":1,"pageTitle":"About","url":"/pterodactyl-documentation/docs/project/about/##","content":" Pterodactyl would not be as successful as it is today without the help of our fantastic community support team. These members can be found in our Discord server and are distinguished with a yellow username.  ","version":"Next","tagName":"h2"},{"title":"Sponsors","type":1,"pageTitle":"About","url":"/pterodactyl-documentation/docs/project/about/##","content":" | The following companies help fund Pterodactyl's development. Interested in becoming a sponsor?  Company\tAboutAussie Server Hosts\tNo frills Australian Owned and operated High Performance Server hosting for some of the most demanding games serving Australia and New Zealand. BisectHosting\tBisectHosting provides Minecraft, Valheim and other server hosting services with the highest reliability and lightning fast support since 2012. MineStrator\tLooking for the most highend French hosting company for your minecraft server? More than 24,000 members on our discord trust us. Give us a try! VibeGAMES\tVibeGAMES is a game server provider that specializes in DDOS protection for the games we offer. We have multiple locations in the US, Brazil, France, Germany, Singapore, Australia and South Africa.  ","version":"Next","tagName":"h2"},{"title":"License","type":1,"pageTitle":"About","url":"/pterodactyl-documentation/docs/project/about/##","content":" Pterodactyl¬Æ Copyright ¬© 2015 - 2022 Dane Everitt and contributors.  Code released under the MIT License.  ","version":"Next","tagName":"h2"},{"title":"Release Signing","type":1,"pageTitle":"About","url":"/pterodactyl-documentation/docs/project/about/##","content":" Previously, releases were signed by a GPG key. All recent releases are now signed using an SSH signing key.  This key is used to sign release tags and commits created by Matthew Penner. This key was first used to signv1.10.2 for the Panel and v1.7.1 for Wings and has been used ever since.  ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKL873MsP1OFfffNC8n9WcVuOXOSW65/q26MIzib0K9k  ","version":"Next","tagName":"h2"},{"title":"Terminology","type":0,"sectionRef":"#","url":"/pterodactyl-documentation/docs/project/terms/","content":"","keywords":"","version":"Next"},{"title":"Simple Setup Diagram","type":1,"pageTitle":"Terminology","url":"/pterodactyl-documentation/docs/project/terms/##","content":"   ","version":"Next","tagName":"h2"},{"title":"Advanced Setup Diagram","type":1,"pageTitle":"Terminology","url":"/pterodactyl-documentation/docs/project/terms/##","content":" It is also possible to install wings on the panel machine so it acts as panel and node machine at once.   ","version":"Next","tagName":"h2"},{"title":"Community Standards","type":0,"sectionRef":"#","url":"/pterodactyl-documentation/docs/project/community/","content":"","keywords":"","version":"Next"},{"title":"Community Guidelines","type":1,"pageTitle":"Community Standards","url":"/pterodactyl-documentation/docs/project/community/##","content":" At the most basic level, these guidelines can be distilled down to:  Be a decent human.Patience is a virtue.  ","version":"Next","tagName":"h2"},{"title":"Be Mature","type":1,"pageTitle":"Community Standards","url":"/pterodactyl-documentation/docs/project/community/##","content":" You are expected to be mature and control your behavior in a manner that adheres to basic human decency. If you are unable to do this you will be removed from the community. Personal attacks, spam (in any form), &quot;doxxing&quot;, or otherwise acting out is not allowed.  This community is fairly lax in regards to moderating language. However, the following are some examples of behavior that is absolutely not tolerated and for which you will be removed from the community.  Racist, sexist, homophobic, transphobic, or otherwise deregatory speech, images, insinuations, or any language whose sole purpose is to denigrate any individual, organization, or class of individual.Threats of violence against any person, group, or organization including &quot;doxxing&quot; of these entities.Pornographic or excessively violent content.  ","version":"Next","tagName":"h3"},{"title":"Limit the Drama","type":1,"pageTitle":"Community Standards","url":"/pterodactyl-documentation/docs/project/community/##","content":" Discussion, including linking to or discussing sites or software, that exists to cast a negative image of other companies or users is not allowed. This includes calling out hosts using nulled software, attempting to elicit negative reactions towards services or websites, or otherwise stirring up drama.  Assume someone is acting in good faith when responding to them. You don't have to agree with everyone, and you don't need to respond to everything.  ","version":"Next","tagName":"h3"},{"title":"Be Patient","type":1,"pageTitle":"Community Standards","url":"/pterodactyl-documentation/docs/project/community/##","content":" This is an open-source project. No members of the development team are paid in an official capacity to write, maintain, nor support this software. The following actions are discouraged in this community.  Repeatedly asking identical questions within the same channel (or across channels) within short periods of time. It is expected that some questions will be missed. If it has been a reasonable amount of time and your question remains unanswered, you're welcome to re-post it. Keep all support questions within the realm of the support channels.Do not interrupt conversations in non-support channels solely to request that someone look in a support channel and help you.  ","version":"Next","tagName":"h3"},{"title":"No Commercial Services","type":1,"pageTitle":"Community Standards","url":"/pterodactyl-documentation/docs/project/community/##","content":" Discussion of paid installation/upgrade services, modifications, or any other commercial offerings is strictly prohibited unless otherwise noted. This also includes reaching out to individuals via Direct Message and offering your services without provocation.  Advertising commercial services within your username or display name on Discord is forbidden.  Sponsors at the silver tier and higher are exempt from this rule.  ","version":"Next","tagName":"h3"},{"title":"No Mention or Ping Spam","type":1,"pageTitle":"Community Standards","url":"/pterodactyl-documentation/docs/project/community/##","content":" Please, do not direct message any administrative, development, or notable community members without first checking with them. Keep all support queries within the public support channels unless you have been directly asked to move it elsewhere.  But what if I am trying to respond back to someone? That is fine! We only ask that you not mention people directly if they're not already involved in a discussion with you. ","version":"Next","tagName":"h3"},{"title":"Introduction","type":0,"sectionRef":"#","url":"/pterodactyl-documentation/docs/project/introduction/","content":"","keywords":"","version":"Next"},{"title":"Supported Games","type":1,"pageTitle":"Introduction","url":"/pterodactyl-documentation/docs/project/introduction/##","content":" We support a huge variety of games by utilizing Docker containers to isolate each instance, giving you the power to host your games across the world without having to bloat each physical machine with additional dependencies.  Some of our core supported games include:  Minecraft ‚Äî including Spigot, Sponge, Bungeecord, Waterfall, and moreRustTerrariaTeamspeakMumbleTeam Fortress 2Counter Strike: Global OffensiveGarry's ModARK: Survival Evolved  In addition to our standard nest of supported games, our community is constantly pushing the limits of this software and there are plenty more games available provided by the community. Some of these games include:  FactorioSan Andreas: MPPocketmine MPSquadFiveMXonoticDiscord ATLBotand many more...  ","version":"Next","tagName":"h2"},{"title":"Responsible Disclosure","type":1,"pageTitle":"Introduction","url":"/pterodactyl-documentation/docs/project/introduction/##","content":" Pterodactyl is completely open-source, and as such completely open to independent users and auditors to browse our code base and hunt for security issues. If you come across anything that raises red flags for you, please do not hesitate to reach out directly to support@pterodactyl.io. We ask that you please be responsible when disclosing any security concerns and do not report them on our public facing bug tracker. ","version":"Next","tagName":"h2"},{"title":"Setting up MySQL","type":0,"sectionRef":"#","url":"/pterodactyl-documentation/docs/project/mysql/","content":"","keywords":"","version":"Next"},{"title":"Creating a database for Pterodactyl","type":1,"pageTitle":"Setting up MySQL","url":"/pterodactyl-documentation/docs/project/mysql/##","content":" MySQL is a core component of Pterodactyl Panel but it can be confusing to setup and use if you've never done so before. This is a very basic tutorial that skims just enough of the surface to set MySQL up and running with the panel. If you're interested in learning more, there are some great tutorials available on the Internet.  ","version":"Next","tagName":"h2"},{"title":"Logging In","type":1,"pageTitle":"Setting up MySQL","url":"/pterodactyl-documentation/docs/project/mysql/##","content":" The first step in this process is to login to the MySQL command line where we will be executing some statements to get things setup. To do so, simply run the command below and provide the Root MySQL account's password that you setup when installing MySQL. If you do not remember doing this, chances are you can just hit enter as no password is set.  # If using MariaDB (v11.0.0+) mariadb -u root -p # If using MySQL mysql -u root -p   ","version":"Next","tagName":"h3"},{"title":"Creating a user","type":1,"pageTitle":"Setting up MySQL","url":"/pterodactyl-documentation/docs/project/mysql/##","content":" For security sake, and due to changes in MySQL 5.7, you'll need to create a new user for the panel. To do so, we want to first tell MySQL to use the mysql database, which stores such information.  Next, we will create a user called pterodactyl and allow logins from localhost which prevents any external connections to our database. You can also use % as a wildcard or enter a numeric IP. We will also set the account password to somePassword.  # Remember to change 'somePassword' below to be a unique password specific to this account. CREATE USER 'pterodactyl'@'127.0.0.1' IDENTIFIED BY 'somePassword';   ","version":"Next","tagName":"h3"},{"title":"Create a database","type":1,"pageTitle":"Setting up MySQL","url":"/pterodactyl-documentation/docs/project/mysql/##","content":" Next, we need to create a database for the panel. In this tutorial we will be naming the database panel, but you can substitute that for whatever name you wish.  CREATE DATABASE panel;   ","version":"Next","tagName":"h3"},{"title":"Assigning permissions","type":1,"pageTitle":"Setting up MySQL","url":"/pterodactyl-documentation/docs/project/mysql/##","content":" Finally, we need to tell MySQL that our pterodactyl user should have access to the panel database. To do this, simply run the command below.  GRANT ALL PRIVILEGES ON panel.* TO 'pterodactyl'@'127.0.0.1';   ","version":"Next","tagName":"h3"},{"title":"Creating a Database Host for Nodes","type":1,"pageTitle":"Setting up MySQL","url":"/pterodactyl-documentation/docs/project/mysql/##","content":" This section covers creating a MySQL user that has permission to create and modify users. This allows the Panel to create per-server databases on the given host.  ","version":"Next","tagName":"h2"},{"title":"Creating a user","type":1,"pageTitle":"Setting up MySQL","url":"/pterodactyl-documentation/docs/project/mysql/##","content":" If your database is on a different host than the one where your Panel or Daemon is installed make sure to use the IP address of the machine the Panel is running on. If you use 127.0.0.1 and try to connect externally, you will receive a connection refused error.  # You should change the username and password below to something unique. CREATE USER 'pterodactyluser'@'127.0.0.1' IDENTIFIED BY 'somepassword';   ","version":"Next","tagName":"h3"},{"title":"Assigning permissions","type":1,"pageTitle":"Setting up MySQL","url":"/pterodactyl-documentation/docs/project/mysql/##","content":" The command below will give your newly created user the ability to create additional users, as well as create and destroy databases. As above, ensure 127.0.0.1 matches the IP address you used in the previous command.  GRANT ALL PRIVILEGES ON *.* TO 'pterodactyluser'@'127.0.0.1' WITH GRANT OPTION;   ","version":"Next","tagName":"h3"},{"title":"Allowing external database access","type":1,"pageTitle":"Setting up MySQL","url":"/pterodactyl-documentation/docs/project/mysql/##","content":" Chances are you'll need to allow external access to this MySQL instance in order to allow servers to connect to it. To do this, open my.cnf, which varies in location depending on your OS and how MySQL was installed. You can type find /etc -iname my.cnf to locate it.  Open my.cnf, add text below to the bottom of the file and save it:  [mysqld] bind-address=0.0.0.0   Restart MySQL/MariaDB to apply these changes. This will override the default MySQL configuration, which by default will only accept requests from localhost. Updating this will allow connections on all interfaces, and thus, external connections. Make sure to allow the MySQL port (default 3306) in your firewall.  If your Database and Wings are on the same machine and won't need external access, you can also use the docker0 interface IP address rather than 127.0.0.1. This IP address can be found by running ip addr | grep docker0, and it likely looks like 172.x.x.x. ","version":"Next","tagName":"h3"},{"title":"Tutorials","type":0,"sectionRef":"#","url":"/pterodactyl-documentation/docs/tutorials/","content":"Tutorials üìÑÔ∏è Setting up MySQL Creating a database for Pterodactyl üìÑÔ∏è Creating SSL Certificates This tutorial briefly covers creating new SSL certificates for your panel and wings. üìÑÔ∏è Dockerized versions To use the dockerized versions of Pterodactyl you need to install Docker!","keywords":"","version":"Next"},{"title":"Wings","type":0,"sectionRef":"#","url":"/pterodactyl-documentation/docs/wings/","content":"Wings üìÑÔ∏è Installing Wings Wings is the next generation server control plane from Pterodactyl. It has been rebuilt from the üìÑÔ∏è Upgrading Wings Upgrading Wings is a painless process and should take less than a minute to complete. üìÑÔ∏è Migrating to Wings This guide is for people looking to migrate from the old Node.JS daemon to Wings. Please see the üìÑÔ∏è Additional Configuration These are advanced configurations for Wings. You risk breaking Wings and making containers unusable if","keywords":"","version":"Next"},{"title":"Creating SSL Certificates","type":0,"sectionRef":"#","url":"/pterodactyl-documentation/docs/tutorials/ssl/","content":"Creating SSL Certificates This tutorial briefly covers creating new SSL certificates for your panel and wings. Method 1: CertbotMethod 2: acme.sh To begin, we will install certbot, a simple script that automatically renews our certificates and allows much easier creation of them. The command below is for Ubuntu distributions, but you can always check Certbot's official site for installation instructions. We have also included a command below to install certbot's Nginx/Apache plugin so you won't have to stop your webserver. sudo apt update sudo apt install -y certbot # Run this if you use Nginx sudo apt install -y python3-certbot-nginx # Run this if you use Apache sudo apt install -y python3-certbot-apache Creating a Certificate After installing the certbot, we need to generate a certificate. There are a couple of ways to do that, but the easiest is to use the web server-specific certbot plugin you just installed. For Wings-only machines that don't need a web server, use the standalone or DNS method of the certbot as you don't need a web server for it. Then, in the command below, you should replace example.com with the domain you would like to generate a certificate for. When you have multiple domains you would like certificates for, simply add more -d anotherdomain.com flags to the command. You can also look into generating a wildcard certificate but that is not covered in this tutorial. When you are using certbot's Nginx/Apache plugin, you won't need to restart your webserver to have the certificate applied assuming that you've already configured the webservers to use SSL as instructed in the web server configuration step. HTTP challenge HTTP challenge requires you to expose port 80 for the challenge verification. # Nginx certbot certonly --nginx -d example.com # Apache certbot certonly --apache -d example.com # Standalone - Use this if neither works. Make sure to stop your webserver first when using this method. certbot certonly --standalone -d example.com DNS challenge DNS challenge requires you to create a new TXT DNS record to verify domain ownership, instead of having to expose port 80. The instructions are displayed when you run the certbot command below. certbot -d example.com --manual --preferred-challenges dns certonly Auto Renewal You'll also probably want to configure the automatic renewal of certificates to prevent unexpected certificate expirations. You can open crontab with sudo crontab -e and add the line from below to the bottom of it for attempting renewal every day at 23 (11 PM). Deploy hook would restart the Nginx service to apply a new certificate when it's renewed successfully. Change nginx in the restart command to suit your own needs, such as to apache or wings. For advanced users, we suggest installing and using acme.shwhich provides more options, and is much more powerful than certbot. 0 23 * * * certbot renew --quiet --deploy-hook &quot;systemctl restart nginx&quot; Troubleshooting If you get an Insecure Connection or SSL/TLS related error when trying to access your panel or wings, the certificate has likely expired. This can be easily fixed by renewing the SSL certificate, although using the command certbot renew might not do the job if port 80 is in use, as it'll return errors like: Error: Attempting to renew cert (domain) from /etc/letsencrypt/renew/domain.conf produced an unexpected error. This will happen especially if you're running Nginx instead of Apache. The solution for this is to use Nginx or Apache plugins with --nginx and --apache. Alternatively, you can stop Nginx, then renew the certificate, finally restart Nginx. Replace nginx with your own web server or with wings should you be renewing the certificate for Wings. Stop Nginx: systemctl stop nginx Renew the certificate: certbot renew Once the process has complete, you can restart the Nginx service: systemctl start nginx You may also need to restart Wings as not every service is able to automatically apply an updated certificate: systemctl restart wings ","keywords":"","version":"Next"},{"title":"Installing Wings","type":0,"sectionRef":"#","url":"/pterodactyl-documentation/docs/wings/install/","content":"","keywords":"","version":"Next"},{"title":"Supported Systems","type":1,"pageTitle":"Installing Wings","url":"/pterodactyl-documentation/docs/wings/install/##","content":" The following is a list of supported operating systems. Please be aware that this is not an exhaustive list, there is a high probability that you can run the software on other Linux distributions without much effort. You are responsible for determining which packages may be necessary on those systems. There is also a very high probability that new releases of the supported OSes below will work just fine, you are not restricted to only the versions listed below.  Operating System\tVersion\tSupported\tNotesUbuntu\t20.04\t‚úÖ\tDocumentation written assuming Ubuntu 20.04 as the base OS. 22.04\t‚úÖ CentOS\t7\t‚úÖ 8\t‚úÖ\tNote that CentOS 8 is EOL. Use Rocky or Alma Linux. Debian\t11\t‚úÖ 12\t‚úÖ Windows\tAll\t‚ùå\tThis software will not run in Windows environments.  ","version":"Next","tagName":"h2"},{"title":"System Requirements","type":1,"pageTitle":"Installing Wings","url":"/pterodactyl-documentation/docs/wings/install/##","content":" To run Wings, you will need a Linux system capable of running Docker containers. Most VPS and almost all dedicated servers should be capable of running Docker, but there are edge cases.  When your provider uses Virtuozzo, OpenVZ (or OVZ), or LXC virtualization, you will most likely be unable to run Wings. Some providers have made the necessary changes for nested virtualization to support Docker. Ask your provider's support team to make sure. KVM is guaranteed to work.  The easiest way to check is to type systemd-detect-virt. If the result doesn't contain OpenVZ orLXC, it should be fine. The result of none will appear when running dedicated hardware without any virtualization.  Should that not work for some reason, or you're still unsure, you can also run the command below.  dane@pterodactyl:~$ sudo dmidecode -s system-manufacturer VMware, Inc.   ","version":"Next","tagName":"h2"},{"title":"Dependencies","type":1,"pageTitle":"Installing Wings","url":"/pterodactyl-documentation/docs/wings/install/##","content":" curlDocker  ","version":"Next","tagName":"h2"},{"title":"Installing Docker","type":1,"pageTitle":"Installing Wings","url":"/pterodactyl-documentation/docs/wings/install/##","content":" For a quick install of Docker CE, you can execute the command below:  curl -sSL https://get.docker.com/ | CHANNEL=stable bash   If you would rather do a manual installation, please reference the official Docker documentation for how to install Docker CE on your server. Some quick links are listed below for commonly supported systems.  UbuntuCentOSDebian  Please be aware that some hosts install a modified kernel that does not support important docker features. Please check your kernel by running uname -r. If your kernel ends in -xxxx-grs-ipv6-64 or -xxxx-mod-std-ipv6-64 you're probably using a non-supported kernel.  Start Docker on Boot  If you are on an operating system with systemd (Ubuntu 16+, Debian 8+, CentOS 7+) run the command below to have Docker start when you boot your machine.  systemctl enable --now docker   Enabling Swap  On most systems, Docker will be unable to setup swap space by default. You can confirm this by running docker info and looking for the output of WARNING: No swap limit support near the bottom.  Enabling swap is entirely optional, but we recommended doing it if you will be hosting for others and to prevent OOM errors.  To enable swap, open /etc/default/grub as a root user and find the line starting with GRUB_CMDLINE_LINUX_DEFAULT. Make sure the line includes swapaccount=1 somewhere inside the double-quotes.  After that, run sudo update-grub followed by sudo reboot to restart the server and have swap enabled. Below is an example of what the line should look like, do not copy this line verbatim. It often has additional OS-specific parameters.  GRUB_CMDLINE_LINUX_DEFAULT=&quot;swapaccount=1&quot;   Some Linux distros may ignore GRUB_CMDLINE_LINUX_DEFAULT. Therefore you might have to use GRUB_CMDLINE_LINUX instead should the default one not work for you.  ","version":"Next","tagName":"h3"},{"title":"Installing Wings","type":1,"pageTitle":"Installing Wings","url":"/pterodactyl-documentation/docs/wings/install/##","content":" The first step for installing Wings is to ensure we have the required directory structure setup. To do so, run the commands below, which will create the base directory and download the wings executable.  mkdir -p /etc/pterodactyl curl -L -o /usr/local/bin/wings &quot;https://github.com/pterodactyl/wings/releases/latest/download/wings_linux_$([[ &quot;$(uname -m)&quot; == &quot;x86_64&quot; ]] &amp;&amp; echo &quot;amd64&quot; || echo &quot;arm64&quot;)&quot; chmod u+x /usr/local/bin/wings   If you are using a server provided by OVH or SoYouStart please be aware that your main drive space is probably allocated to/home, and not / by default. Please consider using /home/daemon-data for server data. This can be easily set when creating the node.  ","version":"Next","tagName":"h2"},{"title":"Configure","type":1,"pageTitle":"Installing Wings","url":"/pterodactyl-documentation/docs/wings/install/##","content":" Once you have installed Wings and the required components, the next step is to create a node on your installed Panel. Go to your Panel administrative view, select Nodes from the sidebar, and on the right side click Create New button.  After you have created a node, click on it and there will be a tab called Configuration. Copy the code block content, paste it into a new file called config.yml in /etc/pterodactyl and save it.  Alternatively, you can click on the Generate Token button, copy the bash command and paste it into your terminal.    When your Panel is using SSL, the Wings must also have one created for its FQDN. See Creating SSL Certificates documentation page for how to create these certificates before continuing.  ","version":"Next","tagName":"h2"},{"title":"Starting Wings","type":1,"pageTitle":"Installing Wings","url":"/pterodactyl-documentation/docs/wings/install/##","content":" To start Wings, simply run the command below, which will start it in a debug mode. Once you confirmed that it is running without errors, use CTRL+C to terminate the process and daemonize it by following the instructions below. Depending on your server's internet connection pulling and starting Wings for the first time may take a few minutes.  sudo wings --debug   You may optionally add the --debug flag to run Wings in debug mode.  ","version":"Next","tagName":"h3"},{"title":"Daemonizing (using systemd)","type":1,"pageTitle":"Installing Wings","url":"/pterodactyl-documentation/docs/wings/install/##","content":" Running Wings in the background is a simple task, just make sure that it runs without errors before doing this. Place the contents below in a file called wings.service in the /etc/systemd/system directory.  [Unit] Description=Pterodactyl Wings Daemon After=docker.service Requires=docker.service PartOf=docker.service [Service] User=root WorkingDirectory=/etc/pterodactyl LimitNOFILE=4096 PIDFile=/var/run/wings/daemon.pid ExecStart=/usr/local/bin/wings Restart=on-failure StartLimitInterval=180 StartLimitBurst=30 RestartSec=5s [Install] WantedBy=multi-user.target   Then, run the commands below to reload systemd and start Wings.  systemctl enable --now wings   ","version":"Next","tagName":"h3"},{"title":"Node Allocations","type":1,"pageTitle":"Installing Wings","url":"/pterodactyl-documentation/docs/wings/install/##","content":" Allocation is a combination of IP and Port that you can assign to a server. Each created server must have at least one allocation. The allocation would be the IP address of your network interface. In some cases, such as when behind NAT, it would be the internal IP. To create new allocations go to Nodes &gt; your node &gt; Allocation.    Type hostname -I | awk '{print $1}' to find the IP to be used for the allocation. Alternatively, you can type ip addr | grep &quot;inet &quot; to see all your available interfaces and IP addresses. Do not use 127.0.0.1 for allocations. ","version":"Next","tagName":"h3"},{"title":"Additional Configuration","type":0,"sectionRef":"#","url":"/pterodactyl-documentation/docs/wings/configuration/","content":"","keywords":"","version":"Next"},{"title":"Private Registries","type":1,"pageTitle":"Additional Configuration","url":"/pterodactyl-documentation/docs/wings/configuration/##","content":" You can use these settings to authenticate against (private) docker registries when pulling images.  ","version":"Next","tagName":"h2"},{"title":"Available Keys","type":1,"pageTitle":"Additional Configuration","url":"/pterodactyl-documentation/docs/wings/configuration/##","content":" Setting Key\tDefault Value\tNotesname\tnull\tRegistry address username\tnull\tRegistry username password\tnull\tRegistry password  ","version":"Next","tagName":"h3"},{"title":"Example of usage","type":1,"pageTitle":"Additional Configuration","url":"/pterodactyl-documentation/docs/wings/configuration/##","content":" docker: registries: registry.example.com: username: &quot;registryusername&quot; password: &quot;registrypassword&quot;   ","version":"Next","tagName":"h3"},{"title":"Custom Network Interfaces","type":1,"pageTitle":"Additional Configuration","url":"/pterodactyl-documentation/docs/wings/configuration/##","content":" You can change the network interface that Wings uses for all containers by editing the network name; it is by default set to pterodactyl_nw. For example, to enable Docker host mode change the network name to host.  Changing network mode to host grants Pterodactyl direct access to all machine interfaces and Panel users can bind to any IP or Port even if it's not allocated to their container. You will lose all benefits of Docker network isolation. It is not recommended for public installations that are hosting other users' servers.  ","version":"Next","tagName":"h2"},{"title":"Example of usage","type":1,"pageTitle":"Additional Configuration","url":"/pterodactyl-documentation/docs/wings/configuration/##","content":" docker: network: name: host network_mode: host   After making changes, the following commands will stop the Wings, remove the Pterodactyl network, and start the Wings again. Run at your own risk.systemctl stop wings &amp;&amp; docker network rm pterodactyl_nw &amp;&amp; systemctl start wings  ","version":"Next","tagName":"h3"},{"title":"Enabling Cloudflare proxy","type":1,"pageTitle":"Additional Configuration","url":"/pterodactyl-documentation/docs/wings/configuration/##","content":" Cloudflare proxying of the Wings isn't beneficial since users will be connecting to the machine directly and bypassing any Cloudflare protection. As such, your Node machine IP will still be exposed.  To enable Cloudflare proxy, you must change the Wings port to one of the Cloudflare HTTPS ports with caching enabled (more info here), such as 8443, because Cloudflare only supports HTTP on port 8080. Select your Node in the Admin Panel, and on the settings tab, change the port. Make sure that you set &quot;Not Behind Proxy&quot; when using Full SSL settings in Cloudflare. Then on Cloudflare dashboard, your FQDN must have an orange cloud enabled beside it.  You are unable to proxy the SFTP port through Cloudflare unless you have their enterprise plan.  ","version":"Next","tagName":"h2"},{"title":"Container PID Limit","type":1,"pageTitle":"Additional Configuration","url":"/pterodactyl-documentation/docs/wings/configuration/##","content":" You can change the total number of processes that can be active in a container at any given moment by changing the container_pid_limit value. The default value is 512. You can set it to 0 to disable the limit completely. However, this is not recommended as the limit prevents malicious overloading of the node. Restart wings and your game server to apply the new limit.  ","version":"Next","tagName":"h2"},{"title":"Example of usage","type":1,"pageTitle":"Additional Configuration","url":"/pterodactyl-documentation/docs/wings/configuration/##","content":" docker: ... container_pid_limit: 512 ...   ","version":"Next","tagName":"h3"},{"title":"Throttles Limits","type":1,"pageTitle":"Additional Configuration","url":"/pterodactyl-documentation/docs/wings/configuration/##","content":" You can use these settings to adjust or completely disable throttling.  Setting Key\tDefault Value\tNotesenabled\ttrue\tWhether or not the throttler is enabled lines\t2000\tTotal lines that can be output in a given line_reset_interval period maximum_trigger_count\t5\tAmount of times throttle limit can be triggered before the server will be stopped line_reset_interval\t100\tThe amount of time after which the number of lines processed is reset to 0 decay_interval\t10000\tTime in milliseconds that must pass without triggering throttle limit before trigger count is decremented stop_grace_period\t15\tTime that a server is allowed to be stopping for before it is terminated forcefully if it triggers output throttle write_limit\t0\tImpose I/O write limit for backups to the disk, 0 = unlimited. Value greater than 0 throttles write speed to the set value in MiB/s download_limit\t0\tImpose a Network I/O read limit for archives, 0 = unlimited. Value greater than 0 throttles read speed to the set value in MiB/s  ","version":"Next","tagName":"h2"},{"title":"Example of usage","type":1,"pageTitle":"Additional Configuration","url":"/pterodactyl-documentation/docs/wings/configuration/##","content":" throttles: enabled: true lines: 2000 maximum_trigger_count: 5 line_reset_interval: 100 decay_interval: 10000 stop_grace_period: 15   ","version":"Next","tagName":"h3"},{"title":"Installer Limits","type":1,"pageTitle":"Additional Configuration","url":"/pterodactyl-documentation/docs/wings/configuration/##","content":" Defines the limits on the installer containers that prevents a server's installation process from unintentionally consuming more resources than expected. This is used in conjunction with the server's defined limits. Whichever value is higher will take precedence in the install containers.  Setting Key\tDefault Value\tNotesmemory\t1024\tThe maximum amount of memory install container can use unless server memory limit is higher than this value cpu\t100\tThe maximum amount of cpu install container can use unless server cpu limit is higher than this value  ","version":"Next","tagName":"h2"},{"title":"Example of usage","type":1,"pageTitle":"Additional Configuration","url":"/pterodactyl-documentation/docs/wings/configuration/##","content":" installer_limits: memory: 1024 cpu: 100   ","version":"Next","tagName":"h3"},{"title":"Other values","type":1,"pageTitle":"Additional Configuration","url":"/pterodactyl-documentation/docs/wings/configuration/##","content":" More commonly discussed values. View all Wings config values and explanations in these two files.  Setting Key\tDefault Value\tNotesdebug\tfalse\tForce Wings to run in debug mode tmpfs_size\t100\tThe size of the /tmp directory in MB when mounted into a container websocket_log_count\t150\tThe number of lines to display in the console detect_clean_exit_as_crash\ttrue\tMark server as crashed if it's stopped without user interaction, e.g., not pressing stop button (crash detection) timeout\t60\tTimeout between server crashes that will not cause the server to be automatically restarted app_name\t&quot;Pterodactyl&quot;\tChanges the name of the daemon, shown in the panel's game console check_permissions_on_boot\ttrue\tCheck all file permissions on each boot. Disable this when you have a very large amount of files and the server startup is hanging on checking permissions ","version":"Next","tagName":"h2"},{"title":"Dockerized versions","type":0,"sectionRef":"#","url":"/pterodactyl-documentation/docs/tutorials/docker/","content":"","keywords":"","version":"Next"},{"title":"Panel Image","type":1,"pageTitle":"Dockerized versions","url":"/pterodactyl-documentation/docs/tutorials/docker/##","content":" ghcr.io/pterodactyl/panel is a ready to use docker image for the panel.  ","version":"Next","tagName":"h2"},{"title":"Requirements","type":1,"pageTitle":"Dockerized versions","url":"/pterodactyl-documentation/docs/tutorials/docker/##","content":" The docker image requires some additional software to function. The software can either be provided in other containers (see the docker-compose.yml as an example) or as existing instances.  A mysql database is required. We recommend the stock MariaDB Image image if you prefer to run it in a docker container. As a non-containerized option we recommend mariadb.  A caching software is required as well. We recommend the stock Redis Image image. You can choose any of the supported options.  You can provide additional settings using a custom .env file or by setting the appropriate environment variables in the docker-compose file. If using the docker-compose file the location of a custom .env file would be /srv/pterodactyl/var/.env.  ","version":"Next","tagName":"h3"},{"title":"Setup","type":1,"pageTitle":"Dockerized versions","url":"/pterodactyl-documentation/docs/tutorials/docker/##","content":" Start the docker container and the required dependencies (either provide existing ones or start containers as well, see the docker-compose.yml file as an example).  # If you are using docker compose curl -L -o docker-compose.yml https://raw.githubusercontent.com/pterodactyl/panel/1.0-develop/docker-compose.example.yml docker-compose up -d # If you are running the docker container without docker compose docker create -it --name panel ghcr.io/pterodactyl/panel   After the startup is complete you'll need to create a panel user.  # If you are using docker compose docker-compose exec panel php artisan p:user:make # If you are running the docker container without docker compose docker exec -it panel php artisan p:user:make   ","version":"Next","tagName":"h3"},{"title":"Environment Variables","type":1,"pageTitle":"Dockerized versions","url":"/pterodactyl-documentation/docs/tutorials/docker/##","content":" There are multiple environment variables to configure the panel when not providing your own .env file, see the following table for details on each available option.  If your APP_URL starts with https:// you need to provide an LE_EMAIL as well so certificates can be generated.  Variable\tDescription\tRequiredAPP_URL\tThe URL the panel will be reachable with (including protocol)\tyes APP_TIMEZONE\tThe timezone to use for the panel\tyes LE_EMAIL\tThe email used for letsencrypt certificate generation\tmaybe DB_HOST\tThe host of the mysql instance\tyes DB_PORT\tThe port of the mysql instance\tyes DB_DATABASE\tThe name of the mysql database\tyes DB_USERNAME\tThe mysql user\tyes DB_PASSWORD\tThe mysql password for the specified user\tyes CACHE_DRIVER\tThe cache driver (see Cache drivers for detais)\tyes SESSION_DRIVER\tThe session driver (see Session drivers for detais)\tyes QUEUE_DRIVER\tThe queue driver (see Queue drivers for detais)\tyes REDIS_HOST\tThe hostname or IP address of the redis database\tmaybe REDIS_PORT\tThe port the redis database is using on the host\tmaybe REDIS_PASSWORD\tThe password used to secure the redis database\tmaybe MEMCACHED_HOST\tThe hostname or IP address of memcached\tmaybe MEMCACHED_PORT\tThe port of memcached\tmaybe MEMCACHED_USERNAME\tThe memcached user\tmaybe MEMCACHED_PASSWORD\tThe memcached password for the specified user\tmaybe MAIL_DRIVER\tThe email driver (see Mail drivers for details)\tyes MAIL_FROM\tThe email that should be used as the sender email\tyes MAIL_HOST\tThe host of your mail driver instance\tmaybe MAIL_PORT\tThe port of your mail driver instance\tmaybe MAIL_USERNAME\tThe username for your mail driver\tmaybe MAIL_PASSWORD\tThe password for your mail driver\tmaybe  Cache drivers  You can choose between different cache drivers depending on what you prefer. We recommend redis when using docker as it can be started in a container easily.  Driver\tDescription\tRequired variablesredis\tRedis\tREDIS_HOST, REDIS_PORT, REDIS_PASSWORD database\tMySQL database\tDB_HOST, DB_PORT, DB_DATABASE, DB_USERNAME, DB_PASSWORD memcached\tMemcached\tMEMCACHED_HOST, MEMCACHED_PORT, MEMCACHED_USERNAME, MEMCACHED_PASSWORD file\tFilesystem\t  Session drivers  You can choose between different session drivers depending on what you prefer. We recommend redis when using docker as it can be started in a container easily.  Driver\tDescription\tRequired variablesredis\tRedis\tREDIS_HOST, REDIS_PORT, REDIS_PASSWORD database\tMySQL database\tDB_HOST, DB_PORT, DB_DATABASE, DB_USERNAME, DB_PASSWORD memcached\tMemcached\tMEMCACHED_HOST, MEMCACHED_PORT, MEMCACHED_USERNAME, MEMCACHED_PASSWORD file\tFilesystem cookie\tCookies\t  Queue drivers  You can choose between different queue drivers depending on what you prefer. We recommend redis when using docker as it can be started in a container easily.  Driver\tDescription\tRequired variablesredis\tRedis\tREDIS_HOST, REDIS_PORT, REDIS_PASSWORD database\tMySQL database\tDB_HOST, DB_PORT, DB_DATABASE, DB_USERNAME, DB_PASSWORD sync\tRun tasks synchronously\t  Mail drivers  You can choose between different mail drivers according to your needs. Every driver requires MAIL_FROM to be set.  Driver\tDescription\tRequired variablesmandrill\tMandrill\tMAIL_USERNAME postmark\tPostmark\tMAIL_USERNAME mailgun\tMailgun\tMAIL_USERNAME, MAIL_HOST smtp\tAny SMTP server can be configured\tMAIL_USERNAME, MAIL_HOST, MAIL_PASSWORD, MAIL_PORT  ","version":"Next","tagName":"h3"},{"title":"Wings Image","type":1,"pageTitle":"Dockerized versions","url":"/pterodactyl-documentation/docs/tutorials/docker/##","content":" ghcr.io/pterodactyl/wings is a ready to use docker image for wings.  ","version":"Next","tagName":"h2"},{"title":"Requirements","type":1,"pageTitle":"Dockerized versions","url":"/pterodactyl-documentation/docs/tutorials/docker/##","content":" The docker image doesn't require any additional software to function. See the docker-compose.yml as an example.  If your panel uses SSL your wings need to use SSL as well. Make sure you generated and provided the needed certificates in that case.  ","version":"Next","tagName":"h3"},{"title":"Setup","type":1,"pageTitle":"Dockerized versions","url":"/pterodactyl-documentation/docs/tutorials/docker/##","content":" Start the docker container.  # If you are using docker compose curl -L -o docker-compose.yml https://raw.githubusercontent.com/pterodactyl/wings/develop/docker-compose.example.yml docker-compose up -d # If you are running the docker container without docker compose docker create -it --name wings ghcr.io/pterodactyl/wings   After the startup is complete you can follow the normal wings setup guide to create a new node.  ","version":"Next","tagName":"h3"},{"title":"Environment Variables","type":1,"pageTitle":"Dockerized versions","url":"/pterodactyl-documentation/docs/tutorials/docker/##","content":" There are some environment variables to configure wings, see the following table for details on each available option.  Variable\tDescription\tRequiredTZ\tThe timezone to use for wings\tyes WINGS_UID\tThe UID of the wings user\tyes WINGS_GID\tThe GID of the wings user\tyes WINGS_USERNAME\tThe username of the wings user\tyes ","version":"Next","tagName":"h3"},{"title":"Migrating to Wings","type":0,"sectionRef":"#","url":"/pterodactyl-documentation/docs/wings/migrating/","content":"","keywords":"","version":"Next"},{"title":"Install Wings","type":1,"pageTitle":"Migrating to Wings","url":"/pterodactyl-documentation/docs/wings/migrating/##","content":" The first step for installing the daemon is to make sure we have the required directory structure setup. To do so, run the commands below which will create the base directory and download the wings executable.  mkdir -p /etc/pterodactyl curl -L -o /usr/local/bin/wings https://github.com/pterodactyl/wings/releases/latest/download/wings_linux_amd64 chmod u+x /usr/local/bin/wings   ","version":"Next","tagName":"h2"},{"title":"Copy New Configuration File","type":1,"pageTitle":"Migrating to Wings","url":"/pterodactyl-documentation/docs/wings/migrating/##","content":" Once you have installed Wings, you'll need to copy over a new configuration file from the Panel. This file is in a new format, and should be easier for you to manage and edit in the future.  Simply copy and paste the code block and paste it into a file called config.yml within the /etc/pterodactyldirectory and save it.    Please note that any modifications you previously made to the configuration will be lost with this. If you have modifications to our default settings, the best option is to start Wings once with the copied configuration which will then populate all of the other configuration settings. From there you can make any adjustments as necessary.  ","version":"Next","tagName":"h2"},{"title":"Remove Old Daemon","type":1,"pageTitle":"Migrating to Wings","url":"/pterodactyl-documentation/docs/wings/migrating/##","content":" Now that Wings is installed, we need to remove all of the old daemon code from the server since it is not being used anymore. To do this, simply execute the following commands ‚Äî assuming your old daemon is in the default/srv/daemon directory.  # Stop the old daemon. systemctl stop wings # Delete the entire directory. There is nothing stored in here that we actually need for the # purposes of this migration. Remember, server data is stored in /srv/daemon-data. rm -rf /srv/daemon # Optionally, remove NodeJS from your system if it was not used for anything else. apt -y remove nodejs # or: yum remove nodejs   ","version":"Next","tagName":"h2"},{"title":"Remove Standalone SFTP","type":1,"pageTitle":"Migrating to Wings","url":"/pterodactyl-documentation/docs/wings/migrating/##","content":" If you've used the standalone SFTP server with the old daemon, we need to remove it's systemd service as well, as it's no longer needed. You can do so using the following commands.  # stop and disable the standalone sftp systemctl disable --now pterosftp # delete the systemd service rm /etc/systemd/system/pterosftp.service   ","version":"Next","tagName":"h3"},{"title":"Daemonize Wings","type":1,"pageTitle":"Migrating to Wings","url":"/pterodactyl-documentation/docs/wings/migrating/##","content":" You'll then need to edit your existing systemd service file for Wings to point to the new control software. To do this, open /etc/systemd/system/wings.service and replace the entire contents of the file with the following:  [Unit] Description=Pterodactyl Wings Daemon After=docker.service [Service] User=root WorkingDirectory=/etc/pterodactyl LimitNOFILE=4096 PIDFile=/var/run/wings/daemon.pid ExecStart=/usr/local/bin/wings Restart=on-failure StartLimitInterval=600 [Install] WantedBy=multi-user.target   Then, start wings.  systemctl daemon-reload systemctl enable --now wings   If you encounter issues starting Wings at this point, run the following command to start Wings directly and check for any specific error output. sudo wings --debug  ","version":"Next","tagName":"h2"},{"title":"Upgrading Wings","type":0,"sectionRef":"#","url":"/pterodactyl-documentation/docs/wings/upgrading/","content":"","keywords":"","version":"Next"},{"title":"Wings Version Requirements","type":1,"pageTitle":"Upgrading Wings","url":"/pterodactyl-documentation/docs/wings/upgrading/##","content":" Each version of Pterodactyl Panel also has a corresponding minimum version of Wings that is required for it to run. Please see the chart below for how these versions line up. In most cases your base Wings version should match that of your Panel.  Panel Version\tWings Version\tSupported1.0.x\t1.0.x 1.1.x\t1.1.x 1.2.x\t1.2.x 1.3.x\t1.3.x 1.4.x\t1.4.x 1.5.x\t1.4.x 1.6.x\t1.4.x 1.7.x\t1.5.x 1.8.x\t1.6.x 1.9.x\t1.6.x 1.10.x\t1.7.x 1.11.x\t1.11.x\t‚úÖ  NOTE: There are no 1.8.x, 1.9.x, or 1.10.x releases of Wings.  ","version":"Next","tagName":"h2"},{"title":"Download Updated Binary","type":1,"pageTitle":"Upgrading Wings","url":"/pterodactyl-documentation/docs/wings/upgrading/##","content":" First, download the updated wings binary into /usr/local/bin. You will need to stop Wings briefly. Your running servers will not be affected.  systemctl stop wings curl -L -o /usr/local/bin/wings &quot;https://github.com/pterodactyl/wings/releases/latest/download/wings_linux_$([[ &quot;$(uname -m)&quot; == &quot;x86_64&quot; ]] &amp;&amp; echo &quot;amd64&quot; || echo &quot;arm64&quot;)&quot; chmod u+x /usr/local/bin/wings   ","version":"Next","tagName":"h2"},{"title":"Restart Process","type":1,"pageTitle":"Upgrading Wings","url":"/pterodactyl-documentation/docs/wings/upgrading/##","content":" Finally, restart the wings process. Your running servers will not be affected and any open connections to the instance will re-connect automatically.  systemctl restart wings  ","version":"Next","tagName":"h2"}],"options":{"id":"default"}}